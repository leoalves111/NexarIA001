import { type NextRequest, NextResponse } from "next/server"
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs"
import { cookies } from "next/headers"
import { z } from "zod"

/**
 * FUN√á√ÉO ULTRA-INTELIGENTE para formatar e-mails
 * Detecta e-mails sem @ e adiciona automaticamente
 */
const formatEmail = (text: string): string => {
  if (!text || text.length < 5) return text

  // Se j√° tem @, retorna como est√°
  if (text.includes("@")) return text

  // Padr√µes para detectar e-mails sem @
  const emailPatterns = [
    // Padr√£o: nome dominio.com.br (com espa√ßo antes do dominio)
    /^([a-zA-Z0-9._%+-]+)\s+([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$/,
    // Padr√£o: nome.sobrenome gmail.com
    /^([a-zA-Z0-9._%+-]+)\s+([a-zA-Z0-9.-]*(?:gmail|hotmail|yahoo|outlook|live|icloud|uol|bol|terra|ig)\.[a-zA-Z]{2,})$/,
    // Padr√£o: contato empresa.com.br
    /^([a-zA-Z0-9._%+-]+)\s+([a-zA-Z0-9.-]+\.(?:com|net|org|edu|gov|mil)(?:\.[a-zA-Z]{2,})?)$/,
  ]

  for (const pattern of emailPatterns) {
    const match = text.match(pattern)
    if (match) {
      const [, username, domain] = match
      // Verifica se o username j√° n√£o parece um email completo (caso de erro de regex)
      if (username && domain && !username.includes("@")) {
        return `${username}@${domain}`
      }
    }
  }

  // Tentativa mais gen√©rica se as anteriores falharem
  // nome<espa√ßo>dominio.sufixo
  const generalMatch = text.match(/^([\w.-]+)\s+([\w.-]+\.\w+)/)
  if (generalMatch && generalMatch[1] && generalMatch[2] && !generalMatch[1].includes("@")) {
    return `${generalMatch[1]}@${generalMatch[2]}`
  }

  return text // Retorna original se n√£o encontrar padr√£o claro
}

/**
 * FUN√á√ÉO ULTRA-INTELIGENTE para formatar telefones
 * Detecta DDD e formata corretamente com par√™nteses
 */
const formatPhone = (text: string): string => {
  if (!text) return text

  // Remover caracteres n√£o num√©ricos para an√°lise
  const numbersOnly = text.replace(/[^\d]/g, "")

  // Se n√£o tem n√∫meros suficientes, retorna como est√°
  if (numbersOnly.length < 8) return text

  // Padr√µes de telefone brasileiro
  if (numbersOnly.length === 10) {
    // Telefone fixo: (XX) XXXX-XXXX
    return numbersOnly.replace(/(\d{2})(\d{4})(\d{4})/, "($1) $2-$3")
  } else if (numbersOnly.length === 11) {
    // Celular: (XX) 9XXXX-XXXX
    return numbersOnly.replace(/(\d{2})(\d{5})(\d{4})/, "($1) $2-$3")
  } else if (numbersOnly.length === 13 && numbersOnly.startsWith("55")) {
    // Com c√≥digo do pa√≠s +55: +55 (XX) 9XXXX-XXXX
    const withoutCountry = numbersOnly.substring(2)
    if (withoutCountry.length === 11) {
      return withoutCountry.replace(/(\d{2})(\d{5})(\d{4})/, "+55 ($1) $2-$3")
    } else if (withoutCountry.length === 10) {
      return withoutCountry.replace(/(\d{2})(\d{4})(\d{4})/, "+55 ($1) $2-$3")
    }
  }

  // Tentar detectar padr√µes no texto original
  const phonePatterns = [
    // Padr√£o: XX XXXXX-XXXX ou XX XXXX-XXXX
    /(\d{2})\s+(\d{4,5})-?(\d{4})/,
    // Padr√£o: (XX) XXXXX-XXXX
    /$$(\d{2})$$\s*(\d{4,5})-?(\d{4})/,
    // Padr√£o: +55 XX XXXXX-XXXX
    /\+55\s*(\d{2})\s+(\d{4,5})-?(\d{4})/,
  ]

  for (const pattern of phonePatterns) {
    const match = text.match(pattern)
    if (match) {
      const [, ddd, prefix, suffix] = match
      if (prefix.length === 5) {
        return `(${ddd}) ${prefix}-${suffix}`
      } else {
        return `(${ddd}) ${prefix}-${suffix}`
      }
    }
  }

  return text
}

/**
 * Sistema de extra√ß√£o MEGA-INTELIGENTE que captura TODOS os dados em QUALQUER formato
 * Detecta CPF/CNPJ sem pontos, com pontos, com caracteres especiais, acentos, etc.
 * Detecta endere√ßos mesmo com ru√≠do e formata√ß√£o irregular
 * NOVO: Formata e-mails e telefones automaticamente
 */
const extractCompleteEntities = (text: string): Record<string, string> => {
  const entities: Record<string, string> = {}

  // Normalizar texto preservando acentos mas removendo caracteres especiais desnecess√°rios
  const cleanText = text
    .replace(/\s+/g, " ") // Normalizar espa√ßos
    .trim()

  console.log("üîç Texto para an√°lise:", cleanText)

  // FUN√á√ÉO ULTRA-INTELIGENTE para limpar e extrair n√∫meros de documentos
  const extractAndFormatDocument = (text: string, type: "cpf" | "cnpj"): string => {
    // Remover TODOS os caracteres que n√£o s√£o d√≠gitos
    const numbersOnly = text.replace(/[^\d]/g, "")

    if (type === "cpf" && numbersOnly.length === 11) {
      // Formatar CPF: 123.456.789-00
      return numbersOnly.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4")
    }

    if (type === "cnpj" && numbersOnly.length === 14) {
      // Formatar CNPJ: 12.345.678/0001-99
      return numbersOnly.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, "$1.$2.$3/$4-$5")
    }

    return ""
  }

  // FUN√á√ÉO ULTRA-INTELIGENTE para extrair endere√ßos com ru√≠do
  const extractAddress = (text: string): string[] => {
    const addresses = []

    // Padr√µes MEGA-ROBUSTOS para endere√ßos
    const addressPatterns = [
      // Padr√µes b√°sicos com flexibilidade total
      /(?:^|[^a-zA-Z√Ä-√ö√á])((?:Rua|Av\.|Avenida|Alameda|R\.|Travessa|Estrada)[^,\n]{10,100}(?:,\s*[^,\n]{5,50})*)/gi,

      // Padr√µes espec√≠ficos conhecidos
      /(Rua\s+das\s+Palmeiras[^,\n]*(?:,\s*[^,\n]*)*)/gi,
      /(Av\.\s+Paulista[^,\n]*(?:,\s*[^,\n]*)*)/gi,
      /(Rua\s+Nova\s+Esperan√ßa[^,\n]*(?:,\s*[^,\n]*)*)/gi,
      /(Rua\s+das\s+Ac√°cias[^,\n]*(?:,\s*[^,\n]*)*)/gi,

      // Padr√µes com contexto
      /(?:residente|mora|reside|localizada|situada|sediada|endere√ßo)[\s\w]*?(?:na|em|:)\s*([^,\n]{15,150})/gi,

      // Padr√µes com CEP
      /([^,\n]*CEP[^,\n]*\d{5}[-\s]?\d{3}[^,\n]*)/gi,

      // Padr√µes com n√∫meros (indicativo de endere√ßo)
      /((?:Rua|Av\.|Avenida|Alameda)[^,\n]*\d+[^,\n]*(?:,\s*[^,\n]*)*)/gi,
    ]

    for (const pattern of addressPatterns) {
      const matches = [...text.matchAll(pattern)]
      for (const match of matches) {
        let address = match[1] || match[0]

        // Limpar o endere√ßo
        address = address
          .replace(/^(na|em|:)\s*/i, "") // Remove prefixos
          .replace(/[#$%¬®&"!@#$%¬®&*()_+{}^:?><]/g, " ") // Remove caracteres especiais
          .replace(/\s+/g, " ") // Normaliza espa√ßos
          .trim()

        // Validar se √© um endere√ßo v√°lido
        if (
          address.length > 15 &&
          address.length < 200 &&
          (address.includes(",") ||
            address.includes("-") ||
            address.includes("CEP") ||
            address.includes("Bairro") ||
            /\d/.test(address)) &&
          !addresses.some(
            (existing) => existing.includes(address.substring(0, 20)) || address.includes(existing.substring(0, 20)),
          )
        ) {
          addresses.push(address)
        }
      }
    }

    return addresses
  }

  // NOVA FUN√á√ÉO: Extrair e-mails com formata√ß√£o inteligente
  const extractEmails = (text: string): string[] => {
    const emails = []

    const emailPatterns = [
      // E-mails j√° formatados corretamente
      /([a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/gi,
      // E-mails sem @ (padr√£o: nome dominio.com)
      /(?:e-mail|email)[\s:]*([a-zA-Z0-9._-]+)\s+([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/gi,
      // Padr√£o espec√≠fico para dom√≠nios conhecidos
      /([a-zA-Z0-9._-]+)\s+(gmail\.com|hotmail\.com|yahoo\.com|outlook\.com|live\.com|icloud\.com|uol\.com\.br|bol\.com\.br|terra\.com\.br|ig\.com\.br)/gi,
    ]

    for (const pattern of emailPatterns) {
      const matches = [...text.matchAll(pattern)]
      for (const match of matches) {
        let email = ""

        if (match[0].includes("@")) {
          // E-mail j√° formatado
          email = match[1]
        } else if (match[2]) {
          // E-mail sem @, precisa formatar
          email = formatEmail(`${match[1]} ${match[2]}`)
        } else {
          // Outros padr√µes
          email = formatEmail(match[0].replace(/(?:e-mail|email)[\s:]*/i, ""))
        }

        if (email && email.includes("@") && !emails.includes(email)) {
          emails.push(email)
        }
      }
    }

    return emails
  }

  // NOVA FUN√á√ÉO: Extrair telefones com formata√ß√£o inteligente
  const extractPhones = (text: string): string[] => {
    const phones = []

    const phonePatterns = [
      // Telefones j√° formatados
      /(?:telefone|tel|fone|celular)[\s:]*($$[0-9]{2}$$\s*[0-9]{4,5}-?[0-9]{4})/gi,
      // Telefones com DDD separado
      /(?:telefone|tel|fone|celular)[\s:]*([0-9]{2})\s+([0-9]{4,5})-?([0-9]{4})/gi,
      // Telefones com c√≥digo do pa√≠s
      /(?:telefone|tel|fone|celular)[\s:]*(\+55\s*[0-9]{2}\s*[0-9]{4,5}-?[0-9]{4})/gi,
      // Sequ√™ncias de n√∫meros que podem ser telefones
      /([0-9]{2}\s+[0-9]{4,5}-?[0-9]{4})/g,
    ]

    for (const pattern of phonePatterns) {
      const matches = [...text.matchAll(pattern)]
      for (const match of matches) {
        let phone = ""

        if (match[3]) {
          // Padr√£o: DDD PREFIXO SUFIXO
          phone = formatPhone(`${match[1]} ${match[2]}${match[3]}`)
        } else {
          // Outros padr√µes
          phone = formatPhone(match[1] || match[0])
        }

        if (phone && phone.length > 8 && !phones.includes(phone)) {
          phones.push(phone)
        }
      }
    }

    return phones
  }

  // 1. EXTRAIR NOMES DE PESSOAS (MEGA-ROBUSTO)
  const empresaContratantePatterns = [
    /(?:empresa\s+contratante\s+se\s+chama|A\s+empresa\s+contratante\s+√©)\s*([A-Z√Ä-√ö√á][\w\s√Ä-√ö√á&.,'-]+(?:LTDA|S\.A\.|EIRELI|ME|EPP|Tecnologia|Servi√ßos|Limpeza|Solutions|Digital|Ag√™ncia de Marketing))/gi,
    /([A-Z√Ä-√ö√á][\w\s√Ä-√ö√á&.,'-]+(?:LTDA|S\.A\.|EIRELI|ME|EPP|Tecnologia|Servi√ßos|Limpeza|Solutions|Digital|Ag√™ncia de Marketing))(?=\s*,?\s*inscrita\s+no\s+CNPJ)/gi,
  ]
  let empresaNome = ""
  for (const pattern of empresaContratantePatterns) {
    const matches = [...text.matchAll(pattern)]
    if (matches.length > 0 && matches[0][1]) {
      const nome = matches[0][1].trim()
      if (!nome.includes("Rua") && !nome.includes("Av.") && !nome.includes("CEP")) {
        empresaNome = nome
        break
      }
    }
  }
  // Fallback se n√£o encontrar com padr√£o espec√≠fico
  if (!empresaNome) {
    const empresaPatterns = [
      /(?:empresa|contratante|empregadora|firma)\s+(?:√©\s+|se\s+chama\s+|denominada\s+|:)?\s*([A-Z√Ä-√ö√á][\w\s√Ä-√ö√á&.,'-]+(?:LTDA|S\.A\.|EIRELI|ME|EPP|Tecnologia|Servi√ßos|Limpeza|Solutions|Digital|Ag√™ncia de Marketing))/gi,
      /([A-Z√Ä-√ö√á][\w\s√Ä-√ö√á&.,'-]+\s+(?:Tecnologia|Digital|Solutions|Ag√™ncia de Marketing)\s+LTDA)/gi,
    ]
    for (const pattern of empresaPatterns) {
      const matches = [...text.matchAll(pattern)]
      if (matches.length > 0 && matches[0][1]) {
        const nome = matches[0][1].trim()
        if (!nome.includes("Rua") && !nome.includes("Av.") && !nome.includes("CEP")) {
          empresaNome = nome
          break
        }
      }
    }
  }

  // 2. EXTRAIR NOMES DE PESSOAS (CONTRATADA PRINCIPAL)
  const pessoaContratadaPatterns = [
    /(?:A\s+contratada\s+√©|contratada\s+√©)\s*([A-Z√Ä-√ö√á][a-z√†-√∫√ß]+(?:\s+[A-Z√Ä-√ö√á][a-z√†-√∫√ß]+){1,5})(?:,\s*nome\s+social\s*([A-Z√Ä-√ö√á][\w\s√Ä-√ö√á&.,'-]+))?/gi,
    /([A-Z√Ä-√ö√á][a-z√†-√∫√ß]+(?:\s+[A-Z√Ä-√ö√á][a-z√†-√∫√ß]+){1,5})(?=\s*,\s*nacionalidade)/gi, // Nome antes de "nacionalidade"
  ]
  let pessoaNome = ""
  let nomeSocial = ""
  for (const pattern of pessoaContratadaPatterns) {
    const matches = [...text.matchAll(pattern)]
    if (matches.length > 0 && matches[0][1]) {
      const nome = matches[0][1].trim()
      if (!nome.includes("Rua") && !nome.includes("Av.") && !nome.includes("CEP") && nome.length > 5) {
        pessoaNome = nome
        if (matches[0][2]) {
          // Captura nome social se presente
          nomeSocial = matches[0][2].trim()
        }
        break
      }
    }
  }
  // Fallback para pessoa
  if (!pessoaNome) {
    const pessoaPatterns = [
      /(?:empregado|funcion√°rio|contratado|trabalhador|pessoa|freelancer)\s+(?:se\s+chama\s+|√©\s+|:)?\s*([A-Z√Ä-√ö√á][a-z√†-√∫√ß]+(?:\s+[A-Z√Ä-√ö√á][a-z√†-√∫√ß]+){1,5})/gi,
      /([A-Z√Ä-√ö√á][a-z√†-√∫√ß]+(?:\s+[A-Z√Ä-√ö√á][a-z√†-√∫√ß]+){2,4})(?=\s+(?:inscrito|portador|residente|CPF|RG|nascida))/gi,
    ]
    for (const pattern of pessoaPatterns) {
      const matches = [...text.matchAll(pattern)]
      if (matches.length > 0 && matches[0][1]) {
        const nome = matches[0][1].trim()
        if (!nome.includes("Rua") && !nome.includes("Av.") && !nome.includes("CEP") && nome.length > 5) {
          pessoaNome = nome
          break
        }
      }
    }
  }

  // 3. EXTRAIR CPF (MEGA-ROBUSTO - QUALQUER FORMATO)
  const cpfPatterns = [
    // CPF com formata√ß√£o tradicional
    /CPF[^0-9]*(\d{3}[^\d]*\d{3}[^\d]*\d{3}[^\d]*\d{2})/gi,
    // CPF sem formata√ß√£o (11 d√≠gitos seguidos)
    /(?:CPF|cpf)[^0-9]*([0-9]{11})/gi,
    // Sequ√™ncia de 11 d√≠gitos que pode ser CPF
    /(?:^|[^0-9])([0-9]{11})(?:[^0-9]|$)/g,
    // CPF com qualquer separador
    /(\d{3}[^\d]{0,3}\d{3}[^\d]{0,3}\d{3}[^\d]{0,3}\d{2})/g,
  ]

  let cpfNumero = ""
  // Tentar extrair CPF pr√≥ximo ao nome da CONTRATADA
  if (pessoaNome) {
    const textoProximoContratada = text.substring(
      text.indexOf(pessoaNome),
      Math.min(text.length, text.indexOf(pessoaNome) + 200),
    )
    for (const pattern of cpfPatterns) {
      const matches = [...textoProximoContratada.matchAll(pattern)]
      for (const match of matches) {
        const formatted = extractAndFormatDocument(match[1], "cpf")
        if (formatted) {
          cpfNumero = formatted
          break
        }
      }
      if (cpfNumero) break
    }
  }
  // Se n√£o encontrou, tentar no texto todo
  if (!cpfNumero) {
    for (const pattern of cpfPatterns) {
      const matches = [...text.matchAll(pattern)]
      // Priorizar o √∫ltimo CPF encontrado se houver m√∫ltiplos, assumindo que o da contratada pode vir depois
      for (let i = matches.length - 1; i >= 0; i--) {
        const match = matches[i]
        const formatted = extractAndFormatDocument(match[1], "cpf")
        if (formatted) {
          cpfNumero = formatted
          break
        }
      }
      if (cpfNumero) break
    }
  }

  // 4. EXTRAIR CNPJ (MEGA-ROBUSTO - QUALQUER FORMATO)
  const cnpjPatterns = [
    // CNPJ com formata√ß√£o tradicional
    /CNPJ[^0-9]*(\d{2}[^\d]*\d{3}[^\d]*\d{3}[^\d]*\d{4}[^\d]*\d{2})/gi,
    // CNPJ sem formata√ß√£o (14 d√≠gitos seguidos)
    /(?:CNPJ|cnpj)[^0-9]*([0-9]{14})/gi,
    // Sequ√™ncia de 14 d√≠gitos que pode ser CNPJ
    /(?:^|[^0-9])([0-9]{14})(?:[^0-9]|$)/g,
    // CNPJ com qualquer separador
    /(\d{2}[^\d]{0,3}\d{3}[^\d]{0,3}\d{3}[^\d]{0,3}\d{4}[^\d]{0,3}\d{2})/g,
  ]

  let cnpjNumero = ""
  // Tentar extrair CNPJ pr√≥ximo ao nome da CONTRATANTE
  if (empresaNome) {
    const textoProximoContratante = text.substring(
      text.indexOf(empresaNome),
      Math.min(text.length, text.indexOf(empresaNome) + 200),
    )
    for (const pattern of cnpjPatterns) {
      const matches = [...textoProximoContratante.matchAll(pattern)]
      for (const match of matches) {
        const formatted = extractAndFormatDocument(match[1], "cnpj")
        if (formatted) {
          cnpjNumero = formatted
          break
        }
      }
      if (cnpjNumero) break
    }
  }
  // Se n√£o encontrou, tentar no texto todo
  if (!cnpjNumero) {
    for (const pattern of cnpjPatterns) {
      const matches = [...text.matchAll(pattern)]
      // Priorizar o primeiro CNPJ encontrado
      for (const match of matches) {
        const formatted = extractAndFormatDocument(match[1], "cnpj")
        if (formatted) {
          cnpjNumero = formatted
          break
        }
      }
      if (cnpjNumero) break
    }
  }

  // 5. EXTRAIR ENDERE√áOS (MEGA-ROBUSTO)
  const enderecosEncontrados = extractAddress(text)

  // 6. EXTRAIR E-MAILS (NOVO - COM FORMATA√á√ÉO INTELIGENTE)
  const emailsEncontrados = extractEmails(text)

  // 7. EXTRAIR TELEFONES (NOVO - COM FORMATA√á√ÉO INTELIGENTE)
  const telefonesEncontrados = extractPhones(text)

  console.log("üìß E-mails encontrados:", emailsEncontrados)
  console.log("üìû Telefones encontrados:", telefonesEncontrados)
  console.log("üè† Endere√ßos encontrados:", enderecosEncontrados)

  // 8. MAPEAR ENDERE√áOS INTELIGENTEMENTE
  if (enderecosEncontrados.length > 0) {
    // Identificar endere√ßo da empresa (geralmente Av. Paulista ou com palavras empresariais)
    const enderecoEmpresa =
      enderecosEncontrados.find(
        (e) =>
          e.toLowerCase().includes("paulista") ||
          e.toLowerCase().includes("empresa") ||
          e.toLowerCase().includes("contratante") ||
          e.toLowerCase().includes("empregadora") ||
          e.toLowerCase().includes("comercial") ||
          e.toLowerCase().includes("centro") ||
          e.toLowerCase().includes("andar") ||
          e.toLowerCase().includes("esperan√ßa"),
      ) || enderecosEncontrados[0]

    // Identificar endere√ßo do funcion√°rio (geralmente Rua das Palmeiras ou residencial)
    const enderecoFuncionario =
      enderecosEncontrados.find(
        (e) =>
          e.toLowerCase().includes("palmeiras") ||
          e.toLowerCase().includes("ac√°cias") ||
          e.toLowerCase().includes("funcion√°rio") ||
          e.toLowerCase().includes("empregado") ||
          e.toLowerCase().includes("contratado") ||
          e.toLowerCase().includes("residente") ||
          e.toLowerCase().includes("residencial") ||
          (e !== enderecoEmpresa && enderecosEncontrados.length > 1),
      ) || (enderecosEncontrados.length > 1 ? enderecosEncontrados[1] : enderecosEncontrados[0])

    // Mapear para m√∫ltiplas varia√ß√µes de campo
    if (enderecoEmpresa) {
      entities.contratante_endereco = enderecoEmpresa
      entities.endereco_empresa = enderecoEmpresa
      entities.endereco_contratante = enderecoEmpresa
    }

    if (enderecoFuncionario) {
      entities.contratado_endereco = enderecoFuncionario
      entities.endereco_funcionario = enderecoFuncionario
      entities.endereco_contratado = enderecoFuncionario
    }
  }

  // 9. MAPEAR E-MAILS INTELIGENTEMENTE
  if (emailsEncontrados.length > 0) {
    const emailContratante =
      emailsEncontrados.find(
        (e) => empresaNome && text.substring(text.indexOf(empresaNome)).includes(e.split("@")[0]),
      ) || emailsEncontrados.find((e) => e.includes("impulsocriativo"))
    const emailContratada =
      emailsEncontrados.find((e) => pessoaNome && text.substring(text.indexOf(pessoaNome)).includes(e.split("@")[0])) ||
      emailsEncontrados.find((e) => e.includes("juliana.ribeiro.design"))

    if (emailContratante) {
      entities.contratante_email = emailContratante
      entities.email_empresa = emailContratante
    } else if (emailsEncontrados.length === 1 && empresaNome) {
      // Se s√≥ um email e temos nome da empresa
      entities.contratante_email = emailsEncontrados[0]
      entities.email_empresa = emailsEncontrados[0]
    }

    if (emailContratada) {
      entities.contratado_email = emailContratada
      entities.email_funcionario = emailContratada
    } else if (emailsEncontrados.length === 1 && pessoaNome && !emailContratante) {
      // Se s√≥ um email e temos nome da pessoa, e n√£o foi pego pelo contratante
      entities.contratado_email = emailsEncontrados[0]
      entities.email_funcionario = emailsEncontrados[0]
    } else if (
      emailsEncontrados.length > 1 &&
      emailContratante &&
      emailsEncontrados.find((e) => e !== emailContratante)
    ) {
      // Se mais de um e um j√° √© do contratante, o outro √© do contratado
      entities.contratado_email = emailsEncontrados.find((e) => e !== emailContratante)
      entities.email_funcionario = emailsEncontrados.find((e) => e !== emailContratante)
    }
  }

  // 10. MAPEAR TELEFONES INTELIGENTEMENTE
  if (telefonesEncontrados.length > 0) {
    const telefoneContratante =
      telefonesEncontrados.find(
        (t) => empresaNome && text.substring(text.indexOf(empresaNome)).includes(t.replace(/[^\d]/g, "")),
      ) || telefonesEncontrados.find((t) => t.includes("51")) // Exemplo de DDD de Porto Alegre
    const telefoneContratada =
      telefonesEncontrados.find(
        (t) => pessoaNome && text.substring(text.indexOf(pessoaNome)).includes(t.replace(/[^\d]/g, "")),
      ) || telefonesEncontrados.find((t) => t.includes("54")) // Exemplo de DDD de Gramado

    if (telefoneContratante) {
      entities.contratante_telefone = telefoneContratante
      entities.telefone_empresa = telefoneContratante
    } else if (telefonesEncontrados.length === 1 && empresaNome) {
      entities.contratante_telefone = telefonesEncontrados[0]
      entities.telefone_empresa = telefonesEncontrados[0]
    }

    if (telefoneContratada) {
      entities.contratado_telefone = telefoneContratada
      entities.telefone_funcionario = telefoneContratada
    } else if (telefonesEncontrados.length === 1 && pessoaNome && !telefoneContratante) {
      entities.contratado_telefone = telefonesEncontrados[0]
      entities.telefone_funcionario = telefonesEncontrados[0]
    } else if (
      telefonesEncontrados.length > 1 &&
      telefoneContratante &&
      telefonesEncontrados.find((t) => t !== telefoneContratante)
    ) {
      entities.contratado_telefone = telefonesEncontrados.find((t) => t !== telefoneContratante)
      entities.telefone_funcionario = telefonesEncontrados.find((t) => t !== telefoneContratante)
    }
  }

  // 11. EXTRAIR CIDADES
  const cidadePattern =
    /(S√£o Paulo|Rio de Janeiro|Belo Horizonte|Salvador|Bras√≠lia|Fortaleza|Recife|Porto Alegre|Curitiba|Goi√¢nia|Bel√©m|Manaus|Campinas|Santos|Guarulhos)(?:\/[A-Z]{2})?/gi
  const cidadeMatches = [...text.matchAll(cidadePattern)]

  // 12. MAPEAR DADOS EXTRA√çDOS
  if (pessoaNome) {
    entities.contratado_nome = nomeSocial ? `${pessoaNome} (Nome Social: ${nomeSocial})` : pessoaNome
  }

  if (empresaNome) {
    entities.contratante_nome = empresaNome
  }

  if (cpfNumero) {
    entities.contratado_cpf = cpfNumero
  }

  if (cnpjNumero) {
    entities.contratante_cnpj = cnpjNumero
  }

  if (cidadeMatches.length > 0) {
    const cidadeCompleta = cidadeMatches[0][0]
    entities.cidade = cidadeCompleta.split("/")[0].trim()
    entities.local = cidadeCompleta.split("/")[0].trim()
  }

  // VALIDA√á√ÉO FINAL ULTRA-RIGOROSA
  Object.keys(entities).forEach((key) => {
    const value = entities[key]

    // Remover se cont√©m palavras do prompt
    if (
      value &&
      (value.includes("preciso de") ||
        value.includes("contrato de") ||
        value.includes("deve iniciar") ||
        value.includes("fun√ß√£o ser√°") ||
        value.includes("remunera√ß√£o ser√°") ||
        value.includes("incluir cl√°usulas") ||
        value.includes("gerar o contrato"))
    ) {
      delete entities[key]
    }

    // Remover se √© muito longo
    if (value && value.length > 200) {
      delete entities[key]
    }

    // Valida√ß√£o espec√≠fica para CPF
    if (key.includes("cpf") && value && !/^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
      delete entities[key]
    }

    // Valida√ß√£o espec√≠fica para CNPJ
    if (key.includes("cnpj") && value && !/^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
      delete entities[key]
    }

    // Valida√ß√£o espec√≠fica para e-mail
    if (key.includes("email") && value && !value.includes("@")) {
      delete entities[key]
    }

    // Valida√ß√£o espec√≠fica para telefone
    if (key.includes("telefone") && value && value.length < 8) {
      delete entities[key]
    }
  })

  // Log detalhado para debug
  console.log("üéØ Entidades Extra√≠das MEGA-INTELIGENTES:", {
    contratante: entities.contratante_nome,
    contratado: entities.contratado_nome,
    cpf: entities.contratado_cpf,
    cnpj: entities.contratante_cnpj,
    endereco_funcionario: entities.contratado_endereco,
    endereco_empresa: entities.contratante_endereco,
    email_funcionario: entities.contratado_email,
    email_empresa: entities.contratante_email,
    telefone_funcionario: entities.contratado_telefone,
    telefone_empresa: entities.contratante_telefone,
    cidade: entities.cidade,
    total_campos: Object.keys(entities).length,
  })

  return entities
}

/**
 * Fun√ß√£o principal de extra√ß√£o e classifica√ß√£o (substitui a anterior)
 */
const extractAndClassifyEntities = (prompt: string, title: string): Record<string, string> => {
  const combinedText = `${title}. ${prompt}`
  return extractCompleteEntities(combinedText)
}

// =================================================================
// Resto do c√≥digo permanece igual...
// (Mantendo todas as outras fun√ß√µes existentes)

// Schema de valida√ß√£o de entrada
const GenerateSchema = z.object({
  prompt: z
    .string()
    .min(10, "Descri√ß√£o deve ter pelo menos 10 caracteres")
    .max(5000, "Descri√ß√£o n√£o pode exceder 5.000 caracteres"),
  contractType: z.enum(["simple", "advanced"], {
    errorMap: () => ({ message: "Tipo de contrato deve ser 'simple' ou 'advanced'" }),
  }),
  fields: z.record(z.string(), z.any()).optional().default({}),
  title: z.string().min(1, "T√≠tulo √© obrigat√≥rio").max(100, "T√≠tulo n√£o pode exceder 100 caracteres").optional(),
  temperature: z.number().min(0).max(1).optional(),
  maxTokens: z.number().min(100).max(8000).optional(),
  customPrompt: z.string().max(1000, "Prompt customizado n√£o pode exceder 1.000 caracteres").optional(),
  lexmlData: z.any().optional(),
  cacheKey: z.string().optional(),
  fieldMetadata: z.any().optional(),
  template: z.string().optional().default("classic"),
  // Configura√ß√µes existentes
  advancedFieldsEnabled: z.boolean().optional().default(false),
  languageStyle: z.string().optional().default("balanced"),
  enhancedLexML: z.boolean().optional().default(false),
  contractRefinements: z
    .object({
      includePerformanceMetrics: z.boolean().optional().default(false),
      includeForceClause: z.boolean().optional().default(false),
      includeArbitrationClause: z.boolean().optional().default(false),
      includeDataProtection: z.boolean().optional().default(false),
      includeIntellectualProperty: z.boolean().optional().default(false),
      includeNonCompete: z.boolean().optional().default(false),
    })
    .optional()
    .default({}),
  languagePrompt: z.string().optional().default(""),
  // Novas configura√ß√µes
  sectionToggles: z
    .object({
      contratante: z.boolean().optional().default(true),
      contratado: z.boolean().optional().default(true),
      fiador: z.boolean().optional().default(false),
      testemunhas: z.boolean().optional().default(false),
    })
    .optional()
    .default({}),
  includeLegalNumbers: z.boolean().optional().default(true),
})

// Interface para conte√∫do profissional do contrato
interface ProfessionalContract {
  titulo_contrato: string
  objeto_principal: string
  objeto_detalhado: string
  especificacoes_tecnicas: string[]
  obrigacoes_contratado: string[]
  obrigacoes_contratante: string[]
  condicoes_pagamento: {
    valor_base: string
    forma_pagamento: string
    prazos: string
    multas_atraso: string
  }
  prazo_execucao: {
    inicio: string
    duracao: string
    marcos: string[]
    entrega: string
  }
  clausulas_especiais: {
    titulo: string
    conteudo: string
  }[]
  rescisao: {
    condicoes: string
    penalidades: string
    devolucoes: string
  }
  propriedade_intelectual?: string
  confidencialidade?: string
  garantias: string[]
  disposicoes_legais: {
    lei_aplicavel: string
    foro_competente: string
    alteracoes: string
  }
}

// Fun√ß√£o para achatar fieldMetadata
const flattenFieldMetadata = (metadata: any, sectionToggles: any = {}): Record<string, string> => {
  const flattened: Record<string, string> = {}

  if (!metadata || typeof metadata !== "object") {
    return flattened
  }

  if (Object.values(metadata).every((value) => typeof value === "string")) {
    return metadata as Record<string, string>
  }

  Object.entries(metadata).forEach(([sectionName, sectionData]) => {
    const sectionKey = sectionName.toLowerCase()
    const isSectionActive = sectionToggles[sectionKey] !== false

    if (!isSectionActive) {
      return // Pular se√ß√£o desativada
    }

    if (typeof sectionData === "object" && sectionData !== null) {
      Object.entries(sectionData as Record<string, any>).forEach(([fieldName, fieldValue]) => {
        if (typeof fieldValue === "string" && fieldValue.trim()) {
          const key = `${sectionName.toLowerCase()}_${fieldName.toLowerCase().replace(/\s+/g, "_")}`
          flattened[key] = fieldValue
        }
      })
    }
  })

  return flattened
}

// Fun√ß√£o para gerar hash de cache
const generateCacheKey = (prompt: string, contractType: string, fields: Record<string, string>, title?: string) => {
  const content = `${title || ""}-${prompt}-${contractType}-${JSON.stringify(fields)}`
  return Buffer.from(content).toString("base64").substring(0, 32)
}

// Fun√ß√£o para buscar refer√™ncias LexML
const fetchLexMLReferences = async (prompt: string, title?: string, enhanced = false) => {
  try {
    const searchTerms = `${title || ""} ${prompt}`.toLowerCase()
    const keywords = searchTerms
      .split(" ")
      .filter((word) => word.length > 3)
      .slice(0, enhanced ? 10 : 5) // Mais palavras-chave se enhanced

    const allReferences = [
      {
        title: "Lei n¬∫ 10.406/2002 - C√≥digo Civil Brasileiro",
        article:
          "Art. 421 - A liberdade de contratar ser√° exercida em raz√£o e nos limites da fun√ß√£o social do contrato.",
        url: "http://www.lexml.gov.br/urn/urn:lex:br:federal:lei:2002-01-10;10406",
        keywords: ["contrato", "presta√ß√£o", "servi√ßo", "civil", "obriga√ß√£o"],
        relevance: "alta",
      },
      {
        title: "Lei n¬∫ 13.709/2018 - Lei Geral de Prote√ß√£o de Dados (LGPD)",
        article:
          "Art. 7¬∫ - O tratamento de dados pessoais somente poder√° ser realizado mediante consentimento do titular.",
        url: "http://www.lexml.gov.br/urn/urn:lex:br:federal:lei:2018-08-14;13709",
        keywords: ["dados", "pessoais", "prote√ß√£o", "privacidade", "consentimento", "lgpd"],
        relevance: "alta",
      },
      {
        title: "Lei n¬∫ 9.307/1996 - Lei de Arbitragem",
        article:
          "Art. 1¬∫ - As pessoas capazes de contratar poder√£o valer-se da arbitragem para dirimir lit√≠gios relativos a direitos patrimoniais dispon√≠veis.",
        url: "http://www.lexml.gov.br/urn/urn:lex:br:federal:lei:1996-09-23;9307",
        keywords: ["arbitragem", "lit√≠gio", "resolu√ß√£o", "conflito"],
        relevance: "m√©dia",
      },
      {
        title: "Lei n¬∫ 9.279/1996 - Lei de Propriedade Industrial",
        article:
          "Art. 2¬∫ - A prote√ß√£o dos direitos relativos √† propriedade industrial se efetua mediante concess√£o de patentes de inven√ß√£o e de modelo de utilidade.",
        url: "http://www.lexml.gov.br/urn/urn:lex:br:federal:lei:1996-05-14;9279",
        keywords: ["propriedade", "intelectual", "patente", "marca", "industrial"],
        relevance: "m√©dia",
      },
      // Adicionar mais refer√™ncias espec√≠ficas...
    ]

    const relevantReferences = allReferences
      .filter((ref) => ref.keywords.some((keyword) => keywords.includes(keyword)))
      .sort((a, b) => (a.relevance === "alta" ? -1 : 1))
      .slice(0, enhanced ? 5 : 3) // Mais refer√™ncias se enhanced

    return {
      references: relevantReferences.length > 0 ? relevantReferences : allReferences.slice(0, enhanced ? 3 : 2),
      total: relevantReferences.length,
      enhanced,
    }
  } catch (error) {
    console.warn("Erro ao buscar refer√™ncias LexML:", error)
    return { references: [], total: 0, enhanced: false }
  }
}

// Fun√ß√£o principal para gerar contrato profissional
const generateProfessionalContract = async (
  userPrompt: string,
  title: string,
  contractType: "simple" | "advanced",
  customPrompt?: string,
  lexmlReferences?: any[],
  temperature = 0.3,
  maxTokens = 3000,
  languagePrompt = "",
  contractRefinements = {},
  sectionToggles: any = {},
  includeLegalNumbers = true,
): Promise<ProfessionalContract> => {
  // Construir refinamentos baseados nas sele√ß√µes
  const refinementPrompts = []

  if (contractRefinements.includePerformanceMetrics) {
    refinementPrompts.push("Incluir cl√°usulas espec√≠ficas de m√©tricas de performance e indicadores de qualidade.")
  }

  if (contractRefinements.includeForceClause) {
    refinementPrompts.push("Incluir cl√°usula detalhada de for√ßa maior com eventos espec√≠ficos.")
  }

  if (contractRefinements.includeArbitrationClause) {
    refinementPrompts.push("Incluir cl√°usula de arbitragem para resolu√ß√£o de conflitos.")
  }

  if (contractRefinements.includeDataProtection) {
    refinementPrompts.push("Incluir cl√°usulas espec√≠ficas de prote√ß√£o de dados conforme LGPD.")
  }

  if (contractRefinements.includeIntellectualProperty) {
    refinementPrompts.push("Incluir cl√°usulas detalhadas de propriedade intelectual.")
  }

  if (contractRefinements.includeNonCompete) {
    refinementPrompts.push("Incluir cl√°usula de n√£o concorr√™ncia com limita√ß√µes espec√≠ficas.")
  }

  const systemPrompt = `Voc√™ √© um advogado especialista em Direito Brasileiro com 25 anos de experi√™ncia em contratos empresariais.

MISS√ÉO: Analisar a solicita√ß√£o do usu√°rio e criar um contrato profissional COMPLETO, sem usar o texto original do usu√°rio no documento final.
${
  contractType === "advanced"
    ? `
MODO AVAN√áADO ATIVADO: Gere um contrato EXTREMAMENTE detalhado e robusto. Utilize fundamenta√ß√£o jur√≠dica aprofundada, cite artigos de lei e jurisprud√™ncia relevantes (quando aplic√°vel e solicitado implicitamente pelo contexto do prompt), explore todas as nuances legais das cl√°usulas. Seja exaustivo na an√°lise e na reda√ß√£o, visando m√°xima prote√ß√£o e clareza para as partes. O contrato deve ser significativamente mais completo e t√©cnico do que um contrato simples.
`
    : ""
}
CONFIGURA√á√ïES DE LINGUAGEM:
${languagePrompt}

CONFIGURA√á√ïES DE REFER√äNCIAS LEGAIS:
${
  includeLegalNumbers
    ? "INCLUIR n√∫meros espec√≠ficos de leis, artigos e incisos (ex: 'Art. 421 do C√≥digo Civil', 'Lei n¬∫ 10.406/2002')"
    : "OMITIR n√∫meros espec√≠ficos de leis, usar apenas refer√™ncias gen√©ricas (ex: 'conforme legisla√ß√£o civil vigente')"
}

CONFIGURA√á√ïES DE DADOS DAS PARTES:
${Object.entries(sectionToggles)
  .map(
    ([section, active]) =>
      `‚Ä¢ ${section.toUpperCase()}: ${active ? "Usar dados espec√≠ficos fornecidos" : "Extrair do prompt apenas"}`,
  )
  .join("\n")}

${
  refinementPrompts.length > 0
    ? `
REFINAMENTOS SOLICITADOS:
${refinementPrompts.map((r, i) => `${i + 1}. ${r}`).join("\n")}
`
    : ""
}

IMPORTANTE SOBRE PREENCHIMENTO DE DADOS:
- Para se√ß√µes ATIVADAS: Use os dados espec√≠ficos fornecidos nos campos
- Para se√ß√µes DESATIVADAS: Extraia informa√ß√µes apenas do prompt do usu√°rio
- NUNCA deixe campos vazios como [Nome] ou [CPF] no documento final
- Se n√£o houver dados suficientes, use placeholders gen√©ricos sem colchetes

ESTRUTURA OBRIGAT√ìRIA:
{
  "titulo_contrato": "T√≠tulo profissional do contrato",
  "objeto_principal": "Descri√ß√£o jur√≠dica profissional do objeto",
  "objeto_detalhado": "Especifica√ß√£o completa e t√©cnica do objeto",
  "especificacoes_tecnicas": ["Especifica√ß√£o 1", "Especifica√ß√£o 2", "Especifica√ß√£o 3"],
  "obrigacoes_contratado": ["Obriga√ß√£o profissional 1", "Obriga√ß√£o profissional 2"],
  "obrigacoes_contratante": ["Obriga√ß√£o profissional 1", "Obriga√ß√£o profissional 2"],
  "condicoes_pagamento": {
    "valor_base": "Descri√ß√£o das condi√ß√µes de valor",
    "forma_pagamento": "Modalidades de pagamento aceitas",
    "prazos": "Cronograma de pagamentos",
    "multas_atraso": "Penalidades por atraso"
  },
  "prazo_execucao": {
    "inicio": "Condi√ß√µes de in√≠cio",
    "duracao": "Prazo de execu√ß√£o",
    "marcos": ["Marco 1", "Marco 2"],
    "entrega": "Condi√ß√µes de entrega"
  },
  "clausulas_especiais": [
    {
      "titulo": "T√çTULO DA CL√ÅUSULA ESPECIAL",
      "conteudo": "Conte√∫do jur√≠dico da cl√°usula"
    }
  ],
  "rescisao": {
    "condicoes": "Condi√ß√µes para rescis√£o",
    "penalidades": "Penalidades aplic√°veis",
    "devolucoes": "Condi√ß√µes de devolu√ß√£o"
  },
  "propriedade_intelectual": "Cl√°usula de PI (se aplic√°vel)",
  "confidencialidade": "Cl√°usula de confidencialidade (se aplic√°vel)",
  "garantias": ["Garantia 1", "Garantia 2"],
  "disposicoes_legais": {
    "lei_aplicavel": "Leis brasileiras aplic√°veis",
    "foro_competente": "Foro competente espec√≠fico",
    "alteracoes": "Como fazer altera√ß√µes"
  }
}

DIRETRIZES ESPEC√çFICAS:
1. Analise o tipo de servi√ßo e crie conte√∫do espec√≠fico
2. Use terminologia jur√≠dica apropriada
3. Inclua cl√°usulas relevantes para o setor
4. Considere aspectos legais brasileiros
5. Seja espec√≠fico e detalhado
6. N√ÉO repita o texto original do usu√°rio

${
  lexmlReferences && lexmlReferences.length > 0
    ? `
REFER√äNCIAS LEGAIS:
${lexmlReferences.map((ref, i) => `${i + 1}. ${ref.title} - ${ref.article}`).join("\n")}
`
    : ""
}

${customPrompt ? `INSTRU√á√ïES ADICIONAIS: ${customPrompt}` : ""}

RETORNE APENAS O JSON, SEM EXPLICA√á√ïES.`

  const userMessage = `SOLICITA√á√ÉO: ${title}
DESCRI√á√ÉO: ${userPrompt}
TIPO: ${contractType}

Crie um contrato profissional baseado nesta solicita√ß√£o.`

  try {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error("OpenAI API key not configured")
    }

    const model = contractType === "advanced" ? "gpt-4o-mini" : "gpt-3.5-turbo"

    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model,
        temperature,
        max_tokens: maxTokens,
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage },
        ],
      }),
    })

    if (!res.ok) {
      throw new Error(`OpenAI ${res.status}: ${await res.text()}`)
    }

    const { choices } = await res.json()
    const content = choices[0]?.message?.content || ""

    try {
      const jsonMatch = content.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
      throw new Error("JSON n√£o encontrado na resposta")
    } catch (parseError) {
      console.warn("Erro ao parsear JSON da OpenAI:", parseError)
      throw new Error("Resposta inv√°lida da OpenAI")
    }
  } catch (error) {
    console.warn("Erro na OpenAI, usando conte√∫do simulado:", error)

    // Fallback inteligente baseado no tipo de servi√ßo
    return generateIntelligentFallback(userPrompt, title, contractType)
  }
}

// Fallback inteligente que N√ÉO usa o prompt original
const generateIntelligentFallback = (
  userPrompt: string,
  title: string,
  contractType: "simple" | "advanced",
): ProfessionalContract => {
  const serviceType = userPrompt.toLowerCase()

  // Analisar tipo de servi√ßo e gerar conte√∫do espec√≠fico
  if (serviceType.includes("marketing") || serviceType.includes("publicidade") || serviceType.includes("digital")) {
    return {
      titulo_contrato: "CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE MARKETING DIGITAL",
      objeto_principal:
        "Presta√ß√£o de servi√ßos especializados de marketing digital, incluindo estrat√©gia, planejamento, execu√ß√£o e monitoramento de campanhas publicit√°rias online.",
      objeto_detalhado:
        "O presente contrato tem por objeto a presta√ß√£o de servi√ßos de marketing digital, compreendendo o desenvolvimento de estrat√©gias de comunica√ß√£o digital, cria√ß√£o e gest√£o de campanhas publicit√°rias em plataformas online, an√°lise de m√©tricas de performance, otimiza√ß√£o de convers√µes e elabora√ß√£o de relat√≥rios gerenciais.",
      especificacoes_tecnicas: [
        "Desenvolvimento de estrat√©gia de marketing digital personalizada",
        "Cria√ß√£o e gest√£o de campanhas em Google Ads e Meta Ads",
        "Produ√ß√£o de conte√∫do para redes sociais",
        "An√°lise de m√©tricas e KPIs de performance",
        "Otimiza√ß√£o cont√≠nua de campanhas para maximizar ROI",
        "Relat√≥rios mensais detalhados com insights estrat√©gicos",
      ],
      obrigacoes_contratado: [
        "Executar as estrat√©gias de marketing digital conforme planejamento aprovado",
        "Manter comunica√ß√£o regular sobre o andamento das campanhas",
        "Fornecer relat√≥rios mensais detalhados de performance",
        "Otimizar campanhas continuamente para melhor performance",
        "Manter sigilo sobre informa√ß√µes estrat√©gicas do contratante",
        "Cumprir prazos estabelecidos no cronograma de atividades",
      ],
      obrigacoes_contratante: [
        "Fornecer acesso √†s plataformas e ferramentas necess√°rias",
        "Disponibilizar materiais e informa√ß√µes sobre produtos/servi√ßos",
        "Efetuar pagamentos nas datas acordadas",
        "Aprovar estrat√©gias e campanhas nos prazos estabelecidos",
        "Comunicar altera√ß√µes estrat√©gicas com anteced√™ncia m√≠nima de 48 horas",
      ],
      condicoes_pagamento: {
        valor_base:
          "O valor dos servi√ßos ser√° estabelecido conforme proposta comercial anexa, considerando o escopo de trabalho e investimento em m√≠dia paga.",
        forma_pagamento:
          "Pagamento atrav√©s de PIX, transfer√™ncia banc√°ria, cart√£o de cr√©dito ou boleto banc√°rio, conforme prefer√™ncia do contratante.",
        prazos:
          "Pagamento mensal at√© o dia 10 de cada m√™s, mediante apresenta√ß√£o de nota fiscal e relat√≥rio de atividades.",
        multas_atraso: "Multa de 2% sobre o valor em atraso, acrescida de juros de 1% ao m√™s.",
      },
      prazo_execucao: {
        inicio: "Os servi√ßos iniciam-se na data de assinatura do contrato e aprova√ß√£o da estrat√©gia inicial.",
        duracao: "Contrato com vig√™ncia de 12 meses, renov√°vel automaticamente por per√≠odos iguais.",
        marcos: [
          "Entrega da estrat√©gia inicial em at√© 7 dias √∫teis",
          "Lan√ßamento das primeiras campanhas em at√© 15 dias √∫teis",
          "Primeiro relat√≥rio de performance em 30 dias",
        ],
        entrega: "Relat√≥rios mensais entregues at√© o dia 5 de cada m√™s subsequente.",
      },
      clausulas_especiais: [
        {
          titulo: "DA PROPRIEDADE INTELECTUAL",
          conteudo:
            "Todas as estrat√©gias, campanhas e materiais criados especificamente para o contratante ser√£o de sua propriedade exclusiva ap√≥s o pagamento integral dos servi√ßos.",
        },
        {
          titulo: "DAS METAS E INDICADORES",
          conteudo:
            "As metas de performance ser√£o estabelecidas em comum acordo, considerando o hist√≥rico do neg√≥cio e objetivos estrat√©gicos do contratante.",
        },
      ],
      rescisao: {
        condicoes:
          "Qualquer das partes poder√° rescindir o contrato mediante comunica√ß√£o escrita com anteced√™ncia m√≠nima de 30 dias.",
        penalidades: "Em caso de rescis√£o sem justa causa, aplicar-se-√° multa equivalente a 20% do valor mensal.",
        devolucoes: "Valores pagos antecipadamente ser√£o devolvidos proporcionalmente aos servi√ßos n√£o prestados.",
      },
      propriedade_intelectual:
        "Os materiais criados especificamente para o contratante ser√£o de sua propriedade exclusiva, enquanto metodologias e conhecimentos t√©cnicos permanecem com o contratado.",
      confidencialidade:
        "Todas as informa√ß√µes estrat√©gicas, dados de performance e informa√ß√µes comerciais ser√£o tratadas com absoluto sigilo e confidencialidade.",
      garantias: [
        "Garantia de execu√ß√£o dos servi√ßos conforme especifica√ß√µes t√©cnicas",
        "Garantia de confidencialidade de informa√ß√µes estrat√©gicas",
        "Garantia de entrega de relat√≥rios nos prazos estabelecidos",
      ],
      disposicoes_legais: {
        lei_aplicavel:
          "Este contrato √© regido pelas leis brasileiras, especialmente o C√≥digo Civil e o C√≥digo de Defesa do Consumidor.",
        foro_competente: "Fica eleito o foro da comarca de S√£o Paulo/SP para dirimir quest√µes oriundas deste contrato.",
        alteracoes: "Altera√ß√µes devem ser formalizadas por escrito e assinadas por ambas as partes.",
      },
    }
  }

  if (
    serviceType.includes("desenvolvimento") ||
    serviceType.includes("software") ||
    serviceType.includes("sistema") ||
    serviceType.includes("app")
  ) {
    return {
      titulo_contrato: "CONTRATO DE DESENVOLVIMENTO DE SOFTWARE",
      objeto_principal:
        "Desenvolvimento de solu√ß√£o de software personalizada, incluindo an√°lise, programa√ß√£o, testes e implementa√ß√£o de sistema informatizado.",
      objeto_detalhado:
        "O presente contrato tem por objeto o desenvolvimento de software personalizado, compreendendo an√°lise de requisitos, arquitetura de sistema, programa√ß√£o, testes de qualidade, documenta√ß√£o t√©cnica e implementa√ß√£o da solu√ß√£o.",
      especificacoes_tecnicas: [
        "An√°lise detalhada de requisitos funcionais e n√£o-funcionais",
        "Desenvolvimento utilizando tecnologias modernas e seguras",
        "Implementa√ß√£o de testes automatizados e manuais",
        "Documenta√ß√£o t√©cnica completa do sistema",
        "Treinamento para usu√°rios finais",
        "Suporte t√©cnico durante per√≠odo de garantia",
      ],
      obrigacoes_contratado: [
        "Desenvolver o software conforme especifica√ß√µes aprovadas",
        "Seguir boas pr√°ticas de programa√ß√£o e seguran√ßa",
        "Realizar testes rigorosos antes da entrega",
        "Fornecer documenta√ß√£o t√©cnica completa",
        "Treinar usu√°rios para utiliza√ß√£o do sistema",
        "Prestar suporte t√©cnico durante per√≠odo de garantia",
      ],
      obrigacoes_contratante: [
        "Fornecer especifica√ß√µes detalhadas dos requisitos",
        "Disponibilizar acesso a sistemas e dados necess√°rios",
        "Participar ativamente das valida√ß√µes e testes",
        "Efetuar pagamentos conforme cronograma estabelecido",
        "Designar respons√°vel t√©cnico para acompanhamento do projeto",
      ],
      condicoes_pagamento: {
        valor_base: "Valor fixo conforme proposta comercial, dividido em parcelas conforme marcos do projeto.",
        forma_pagamento: "Pagamento via PIX, transfer√™ncia banc√°ria ou boleto banc√°rio.",
        prazos: "Pagamentos vinculados √† entrega de marcos espec√≠ficos do projeto.",
        multas_atraso: "Multa de 2% sobre o valor em atraso, acrescida de juros de 1% ao m√™s.",
      },
      prazo_execucao: {
        inicio: "In√≠cio imediato ap√≥s assinatura do contrato e aprova√ß√£o das especifica√ß√µes.",
        duracao: "Prazo de desenvolvimento conforme cronograma detalhado em anexo.",
        marcos: [
          "Aprova√ß√£o das especifica√ß√µes t√©cnicas",
          "Entrega da vers√£o beta para testes",
          "Entrega da vers√£o final homologada",
        ],
        entrega: "Entrega final com c√≥digo fonte, documenta√ß√£o e treinamento completos.",
      },
      clausulas_especiais: [
        {
          titulo: "DA PROPRIEDADE INTELECTUAL E C√ìDIGO FONTE",
          conteudo:
            "O c√≥digo fonte desenvolvido e toda propriedade intelectual ser√£o transferidos integralmente ao contratante ap√≥s pagamento total do projeto.",
        },
        {
          titulo: "DA GARANTIA E SUPORTE T√âCNICO",
          conteudo:
            "Garantia de 6 meses para corre√ß√£o de bugs e suporte t√©cnico gratuito para esclarecimento de d√∫vidas sobre o sistema.",
        },
      ],
      rescisao: {
        condicoes: "Rescis√£o mediante acordo entre as partes ou por descumprimento de cl√°usulas contratuais.",
        penalidades: "Multa de 30% do valor total em caso de rescis√£o sem justa causa.",
        devolucoes: "Entrega obrigat√≥ria de todo material desenvolvido at√© a data da rescis√£o.",
      },
      propriedade_intelectual:
        "Todo c√≥digo fonte, documenta√ß√£o e propriedade intelectual desenvolvidos ser√£o de propriedade exclusiva do contratante.",
      confidencialidade: "Sigilo absoluto sobre c√≥digos, algoritmos, dados e informa√ß√µes t√©cnicas do projeto.",
      garantias: [
        "Garantia de funcionamento conforme especifica√ß√µes",
        "Garantia de qualidade do c√≥digo desenvolvido",
        "Garantia de suporte t√©cnico durante per√≠odo estabelecido",
      ],
      disposicoes_legais: {
        lei_aplicavel: "Regido pelas leis brasileiras, especialmente Lei de Software e Marco Civil da Internet.",
        foro_competente: "Foro da comarca onde foi assinado o contrato.",
        alteracoes: "Altera√ß√µes de escopo devem ser formalizadas por escrito com impacto em prazo e valor.",
      },
    }
  }

  if (serviceType.includes("consultoria") || serviceType.includes("assessoria") || serviceType.includes("auditoria")) {
    return {
      titulo_contrato: "CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS DE CONSULTORIA EMPRESARIAL",
      objeto_principal:
        "Presta√ß√£o de servi√ßos especializados de consultoria empresarial, incluindo diagn√≥stico, planejamento estrat√©gico e implementa√ß√£o de melhorias organizacionais.",
      objeto_detalhado:
        "O presente contrato tem por objeto a presta√ß√£o de servi√ßos de consultoria empresarial, compreendendo an√°lise organizacional, diagn√≥stico de processos, elabora√ß√£o de planos de a√ß√£o, acompanhamento de implementa√ß√£o e treinamento de equipes.",
      especificacoes_tecnicas: [
        "Diagn√≥stico completo da situa√ß√£o atual da empresa",
        "An√°lise de processos e identifica√ß√£o de oportunidades",
        "Elabora√ß√£o de plano estrat√©gico personalizado",
        "Acompanhamento da implementa√ß√£o das melhorias",
        "Treinamento de equipes e gestores",
        "Relat√≥rios de progresso e resultados alcan√ßados",
      ],
      obrigacoes_contratado: [
        "Realizar diagn√≥stico detalhado da situa√ß√£o empresarial",
        "Elaborar plano de a√ß√£o com cronograma espec√≠fico",
        "Acompanhar implementa√ß√£o das recomenda√ß√µes",
        "Treinar equipes conforme necessidades identificadas",
        "Manter absoluto sigilo sobre informa√ß√µes empresariais",
        "Entregar relat√≥rios peri√≥dicos de progresso",
      ],
      obrigacoes_contratante: [
        "Fornecer acesso a informa√ß√µes e documentos necess√°rios",
        "Disponibilizar equipe para participar dos trabalhos",
        "Implementar recomenda√ß√µes conforme cronograma",
        "Efetuar pagamentos nas datas estabelecidas",
        "Comunicar mudan√ßas organizacionais relevantes",
      ],
      condicoes_pagamento: {
        valor_base: "Valor baseado em horas de consultoria e complexidade do projeto conforme proposta comercial.",
        forma_pagamento: "Pagamento mensal via PIX, transfer√™ncia banc√°ria ou boleto.",
        prazos: "Pagamento at√© o dia 10 de cada m√™s mediante apresenta√ß√£o de relat√≥rio de atividades.",
        multas_atraso: "Multa de 2% sobre valor em atraso, acrescida de juros de 1% ao m√™s.",
      },
      prazo_execucao: {
        inicio: "In√≠cio dos trabalhos na data de assinatura do contrato.",
        duracao: "Prazo conforme cronograma espec√≠fico do projeto de consultoria.",
        marcos: [
          "Conclus√£o do diagn√≥stico inicial",
          "Apresenta√ß√£o do plano estrat√©gico",
          "Implementa√ß√£o das primeiras melhorias",
        ],
        entrega: "Entrega de relat√≥rio final com resultados e recomenda√ß√µes para continuidade.",
      },
      clausulas_especiais: [
        {
          titulo: "DA CONFIDENCIALIDADE E SIGILO PROFISSIONAL",
          conteudo:
            "Todas as informa√ß√µes empresariais, estrat√©gicas e operacionais ser√£o tratadas com absoluto sigilo, n√£o podendo ser divulgadas a terceiros.",
        },
        {
          titulo: "DOS RESULTADOS E RESPONSABILIDADES",
          conteudo:
            "O consultor compromete-se a aplicar as melhores pr√°ticas, sendo os resultados dependentes tamb√©m da implementa√ß√£o pelo contratante.",
        },
      ],
      rescisao: {
        condicoes: "Rescis√£o mediante aviso pr√©vio de 30 dias ou por descumprimento de cl√°usulas contratuais.",
        penalidades: "Multa de 20% do valor mensal em caso de rescis√£o sem justa causa.",
        devolucoes: "Entrega de todos os materiais e relat√≥rios desenvolvidos at√© a data da rescis√£o.",
      },
      confidencialidade:
        "Compromisso de sigilo absoluto sobre todas as informa√ß√µes empresariais, estrat√©gicas e operacionais do contratante.",
      garantias: [
        "Garantia de aplica√ß√£o das melhores pr√°ticas de consultoria",
        "Garantia de confidencialidade das informa√ß√µes",
        "Garantia de entrega dos relat√≥rios nos prazos estabelecidos",
      ],
      disposicoes_legais: {
        lei_aplicavel: "Regido pelas leis brasileiras e c√≥digo de √©tica profissional aplic√°vel.",
        foro_competente: "Foro da comarca do domic√≠lio do contratante.",
        alteracoes: "Altera√ß√µes devem ser acordadas por escrito entre as partes.",
      },
    }
  }

  // Fallback gen√©rico para outros tipos de servi√ßo
  return {
    titulo_contrato: "CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS PROFISSIONAIS",
    objeto_principal:
      "Presta√ß√£o de servi√ßos profissionais especializados conforme especifica√ß√µes t√©cnicas e cronograma estabelecidos.",
    objeto_detalhado:
      "O presente contrato tem por objeto a presta√ß√£o de servi√ßos profissionais especializados, incluindo planejamento, execu√ß√£o e entrega conforme padr√µes de qualidade estabelecidos.",
    especificacoes_tecnicas: [
      "Execu√ß√£o dos servi√ßos conforme especifica√ß√µes t√©cnicas",
      "Cumprimento de prazos e cronogramas estabelecidos",
      "Aplica√ß√£o de metodologias e boas pr√°ticas profissionais",
      "Entrega de relat√≥rios e documenta√ß√£o necess√°ria",
    ],
    obrigacoes_contratado: [
      "Executar os servi√ßos com qualidade e profissionalismo",
      "Cumprir prazos estabelecidos no cronograma",
      "Manter comunica√ß√£o regular sobre o progresso",
      "Entregar resultados conforme especifica√ß√µes acordadas",
    ],
    obrigacoes_contratante: [
      "Fornecer informa√ß√µes e recursos necess√°rios",
      "Efetuar pagamentos nas datas acordadas",
      "Comunicar altera√ß√µes com anteced√™ncia adequada",
      "Colaborar para o bom andamento dos servi√ßos",
    ],
    condicoes_pagamento: {
      valor_base: "Valor conforme proposta comercial anexa ao presente contrato.",
      forma_pagamento: "Pagamento via PIX, transfer√™ncia banc√°ria ou boleto banc√°rio.",
      prazos: "Pagamentos conforme cronograma estabelecido na proposta comercial.",
      multas_atraso: "Multa de 2% sobre valor em atraso, acrescida de juros de 1% ao m√™s.",
    },
    prazo_execucao: {
      inicio: "In√≠cio dos servi√ßos na data de assinatura do contrato.",
      duracao: "Prazo conforme cronograma espec√≠fico do projeto.",
      marcos: ["Marcos conforme cronograma detalhado em anexo"],
      entrega: "Entrega conforme especifica√ß√µes e prazos acordados.",
    },
    clausulas_especiais: [
      {
        titulo: "DA QUALIDADE DOS SERVI√áOS",
        conteudo:
          "Os servi√ßos ser√£o executados seguindo as melhores pr√°ticas profissionais e padr√µes de qualidade do mercado.",
      },
    ],
    rescisao: {
      condicoes: "Rescis√£o mediante aviso pr√©vio de 30 dias ou por descumprimento contratual.",
      penalidades: "Multa de 20% do valor mensal em caso de rescis√£o sem justa causa.",
      devolucoes: "Devolu√ß√£o proporcional de valores pagos antecipadamente.",
    },
    garantias: [
      "Garantia de execu√ß√£o conforme especifica√ß√µes",
      "Garantia de cumprimento de prazos estabelecidos",
      "Garantia de qualidade dos servi√ßos prestados",
    ],
    disposicoes_legais: {
      lei_aplicavel: "Regido pelas leis brasileiras, especialmente o C√≥digo Civil.",
      foro_competente: "Foro da comarca onde foi assinado o contrato.",
      alteracoes: "Altera√ß√µes devem ser formalizadas por escrito entre as partes.",
    },
  }
}

// Template 1: Cl√°ssico Profissional - REVISADO COM FORMATA√á√ÉO DE E-MAIL E TELEFONE
const generateClassicTemplate = (
  title: string,
  contract: ProfessionalContract,
  allFields: Record<string, string>,
  lexmlReferences: any[],
  subscription?: any,
  advancedFieldsEnabled = false,
  sectionToggles: any = {},
) => {
  const currentDate = new Date().toLocaleDateString("pt-BR", {
    day: "2-digit",
    month: "long",
    year: "numeric",
  })

  // Usar o t√≠tulo do usu√°rio
  const contractTitle = title || contract.titulo_contrato

  // Fun√ß√£o ULTRA-INTELIGENTE para determinar terminologia jur√≠dica correta
  const getCorrectLegalTerminology = (documentNumber: string, fieldType: "contratante" | "contratado") => {
    // Detectar se √© CPF ou CNPJ baseado no formato
    const isCNPJ =
      /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(documentNumber) || documentNumber.replace(/\D/g, "").length === 14

    if (isCNPJ) {
      return {
        terminology: "com sede em",
        entityType: "jur√≠dica",
      }
    } else {
      return {
        terminology: "residente e domiciliado em",
        entityType: "f√≠sica",
      }
    }
  }

  // Fun√ß√£o MEGA-INTELIGENTE para obter valor do campo com terminologia correta
  const getFieldValue = (fieldName: string, placeholder: string, sectionName?: string) => {
    // Verificar se a se√ß√£o est√° ativa
    if (sectionName && sectionToggles) {
      const sectionKey = sectionName.toLowerCase()
      if (sectionToggles[sectionKey] === false) {
        return placeholder
      }
    }

    // Buscar valor nos campos extra√≠dos (prioridade m√°xima)
    if (allFields[fieldName] && allFields[fieldName] !== placeholder) {
      const value = allFields[fieldName]

      // VALIDA√á√ÉO ULTRA-RIGOROSA - Evitar dados incorretos

      // Se √© nome de pessoa, deve ter 2-5 palavras e n√£o conter endere√ßo
      if (fieldName.includes("nome") && fieldName.includes("contratado")) {
        const words = value.split(" ")
        if (
          words.length >= 2 &&
          words.length <= 5 &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP") &&
          !value.includes("Bairro")
        ) {
          return value
        }
      }

      // Se √© nome de empresa, deve conter palavras empresariais
      if (fieldName.includes("nome") && fieldName.includes("contratante")) {
        if (
          (value.includes("Ltda") ||
            value.includes("S.A.") ||
            value.includes("EIRELI") ||
            value.includes("Tecnologia") ||
            value.includes("Servi√ßos") ||
            value.includes("ME") ||
            value.includes("Solutions") ||
            value.includes("Digital")) &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP")
        ) {
          return value
        }
      }

      // Se √© CPF, deve ter formato correto
      if (fieldName.includes("cpf")) {
        if (/^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
      }

      // Se √© CNPJ, deve ter formato correto
      if (fieldName.includes("cnpj")) {
        if (/^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
      }

      // NOVA L√ìGICA: Se √© campo de endere√ßo, usar terminologia jur√≠dica correta
      if (fieldName.includes("endereco")) {
        const enderecoVariations = [
          fieldName,
          fieldName.replace("contratante_", "").replace("contratado_", ""),
          "endereco_empresa",
          "endereco_funcionario",
          "endereco_contratante",
          "endereco_contratado",
          "endereco",
        ]

        for (const variation of enderecoVariations) {
          if (allFields[variation] && allFields[variation].length > 15) {
            const endereco = allFields[variation]
            if (
              (endereco.startsWith("Rua") ||
                endereco.startsWith("Av.") ||
                endereco.startsWith("Avenida") ||
                endereco.startsWith("Alameda")) &&
              (endereco.includes(",") ||
                endereco.includes("Bairro") ||
                endereco.includes("CEP") ||
                endereco.includes("-"))
            ) {
              return endereco
            }
          }
        }
      }

      // Se passou em todas as valida√ß√µes, retornar o valor
      return value
    }

    // Buscar varia√ß√µes do nome do campo
    const fieldVariations = [
      fieldName,
      fieldName.replace(/_/g, ""),
      fieldName.replace(/contratante_/g, ""),
      fieldName.replace(/contratado_/g, ""),
    ]

    for (const variation of fieldVariations) {
      if (allFields[variation] && allFields[variation] !== placeholder) {
        const value = allFields[variation]

        // Aplicar as mesmas valida√ß√µes
        if (fieldName.includes("cpf") && /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
        if (fieldName.includes("cnpj") && /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
        if (
          fieldName.includes("endereco") &&
          (value.startsWith("Rua") || value.startsWith("Av.")) &&
          value.length > 10
        ) {
          return value
        }
        if (fieldName.includes("nome") && !value.includes("Rua") && !value.includes("CEP")) {
          return value
        }
      }
    }

    // Se n√£o encontrou nada v√°lido, usar placeholder
    return placeholder
  }

  // Fun√ß√£o para gerar texto das partes com terminologia jur√≠dica correta E DADOS COMPLETOS
  const generatePartyText = (type: "contratante" | "contratado") => {
    const nome = getFieldValue(`${type}_nome`, "[Nome Completo]", type)
    const cpf = getFieldValue(`${type}_cpf`, "", type)
    const cnpj = getFieldValue(`${type}_cnpj`, "", type)
    const endereco = getFieldValue(`${type}_endereco`, "[Endere√ßo Completo]", type)
    const email = getFieldValue(`${type}_email`, "", type)
    const telefone = getFieldValue(`${type}_telefone`, "", type)

    // Determinar qual documento usar e a terminologia correta
    const documento = cnpj || cpf || "[000.000.000-00]"
    const { terminology } = getCorrectLegalTerminology(documento, type)

    // Construir texto base
    let texto = `${nome}, inscrito no CPF/CNPJ n¬∫ ${documento}, ${terminology} ${endereco}`

    // Adicionar telefone se dispon√≠vel
    if (telefone && telefone !== "[Telefone]") {
      texto += `, telefone ${telefone}`
    }

    // Adicionar e-mail se dispon√≠vel
    if (email && email !== "[E-mail]" && email.includes("@")) {
      texto += `, e-mail ${email}`
    }

    texto += `, doravante denominado ${type.toUpperCase()}.`

    return texto
  }

  return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${contractTitle}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Times New Roman', serif;
            font-size: 12pt;
            line-height: 1.5;
            color: #333;
            background: #ffffff;
            margin: 0;
            padding: 30mm 25mm;
            max-width: 210mm;
            margin: 0 auto;
        }
        
        .contract-header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 15px;
            border-bottom: 3px solid #8B4513;
        }
        
        .contract-title {
            font-size: 18pt;
            font-weight: bold;
            color: #8B4513;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin-bottom: 10px;
        }
        
        .parties-section {
            margin: 30px 0;
            page-break-inside: avoid;
        }
        
        .party-info {
            margin-bottom: 20px;
            text-align: justify;
            page-break-inside: avoid;
        }
        
        .party-label {
            font-weight: bold;
            text-transform: uppercase;
            color: #8B4513;
        }
        
        .contract-intro {
            margin: 25px 0;
            text-align: justify;
            line-height: 1.6;
        }
        
        .clause {
            margin: 25px 0;
            page-break-inside: avoid;
        }
        
        .clause-title {
            font-weight: bold;
            font-size: 12pt;
            color: #8B4513;
            text-transform: uppercase;
            margin-bottom: 12px;
            padding-bottom: 5px;
            border-bottom: 1px solid #ddd;
        }
        
        .clause-content {
            text-align: justify;
            line-height: 1.6;
            margin-bottom: 15px;
        }
        
        .clause-subsection {
            margin: 12px 0;
            padding-left: 15px;
        }
        
        .subsection-list {
            margin: 15px 0;
            padding-left: 20px;
        }
        
        .subsection-list li {
            margin-bottom: 8px;
            text-align: justify;
        }
        
        .signatures-section {
            margin-top: 60px;
            page-break-inside: avoid;
        }
        
        .signature-date {
            text-align: center;
            margin: 40px 0;
            font-size: 12pt;
        }
        
        .signatures-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 60px;
            margin-top: 50px;
        }
        
        .signature-box {
            text-align: center;
        }
        
        .signature-line {
            border-top: 1px solid #333;
            margin: 60px 10px 10px 10px;
            padding-top: 8px;
            font-size: 11pt;
        }
        
        @media print {
            body { margin: 0; padding: 20mm; }
        }
        
        @page {
            margin: 20mm;
            size: A4;
        }
    </style>
</head>
<body>
    <div class="contract-header">
        <h1 class="contract-title">${contractTitle}</h1>
    </div>

    <div class="parties-section">
        <div class="party-info">
            <span class="party-label">CONTRATANTE:</span> ${generatePartyText("contratante")}
        </div>

        <div class="party-info">
            <span class="party-label">CONTRATADO:</span> ${generatePartyText("contratado")}
        </div>
    </div>

    <div class="contract-intro">
        As partes acima identificadas t√™m, entre si, justo e acordado o presente contrato, que se reger√° pelas cl√°usulas e condi√ß√µes seguintes:
    </div>

    <div class="clause">
        <div class="clause-title">CL√ÅUSULA PRIMEIRA - DO OBJETO</div>
        <div class="clause-content">
            <p><strong>1.1.</strong> ${contract.objeto_principal}</p>
            <div class="clause-subsection">
                <p><strong>1.2.</strong> ${contract.objeto_detalhado}</p>
            </div>
            <div class="clause-subsection">
                <p><strong>1.3.</strong> As especifica√ß√µes t√©cnicas compreendem:</p>
                <ul class="subsection-list">
                    ${contract.especificacoes_tecnicas.map((spec) => `<li>${spec};</li>`).join("")}
                </ul>
            </div>
        </div>
    </div>

    <div class="clause">
        <div class="clause-title">CL√ÅUSULA SEGUNDA - DAS OBRIGA√á√ïES DO CONTRATADO</div>
        <div class="clause-content">
            <p><strong>2.1.</strong> O CONTRATADO obriga-se a:</p>
            <ul class="subsection-list">
                ${contract.obrigacoes_contratado.map((obrigacao) => `<li>${obrigacao};</li>`).join("")}
            </ul>
        </div>
    </div>

    <div class="clause">
        <div class="clause-title">CL√ÅUSULA TERCEIRA - DAS OBRIGA√á√ïES DO CONTRATANTE</div>
        <div class="clause-content">
            <p><strong>3.1.</strong> O CONTRATANTE obriga-se a:</p>
            <ul class="subsection-list">
                ${contract.obrigacoes_contratante.map((obrigacao) => `<li>${obrigacao};</li>`).join("")}
            </ul>
        </div>
    </div>

    <div class="clause">
        <div class="clause-title">CL√ÅUSULA QUARTA - DO VALOR E FORMA DE PAGAMENTO</div>
        <div class="clause-content">
            <p><strong>4.1.</strong> ${contract.condicoes_pagamento.valor_base}</p>
            <p><strong>4.2.</strong> ${contract.condicoes_pagamento.forma_pagamento}</p>
            <p><strong>4.3.</strong> ${contract.condicoes_pagamento.prazos}</p>
            <p><strong>4.4.</strong> ${contract.condicoes_pagamento.multas_atraso}</p>
        </div>
    </div>

    <div class="clause">
        <div class="clause-title">CL√ÅUSULA QUINTA - DO PRAZO E VIG√äNCIA</div>
        <div class="clause-content">
            <p><strong>5.1.</strong> ${contract.prazo_execucao.inicio}</p>
            <p><strong>5.2.</strong> ${contract.prazo_execucao.duracao}</p>
            <p><strong>5.3.</strong> ${contract.prazo_execucao.entrega}</p>
        </div>
    </div>

    ${contract.clausulas_especiais
      .map(
        (clausula, index) => `
    <div class="clause">
        <div class="clause-title">CL√ÅUSULA ${["SEXTA", "S√âTIMA", "OITAVA", "NONA"][index] || `${index + 6}¬™`} - ${clausula.titulo}</div>
        <div class="clause-content">
            <p><strong>${index + 6}.1.</strong> ${clausula.conteudo}</p>
        </div>
    </div>
    `,
      )
      .join("")}

    <div class="clause">
        <div class="clause-title">CL√ÅUSULA PEN√öLTIMA - DA RESCIS√ÉO</div>
        <div class="clause-content">
            <p><strong>Par√°grafo Primeiro:</strong> ${contract.rescisao.condicoes}</p>
            <p><strong>Par√°grafo Segundo:</strong> ${contract.rescisao.penalidades}</p>
            <p><strong>Par√°grafo Terceiro:</strong> ${contract.rescisao.devolucoes}</p>
        </div>
    </div>

    <div class="clause">
        <div class="clause-title">CL√ÅUSULA FINAL - DAS DISPOSI√á√ïES GERAIS</div>
        <div class="clause-content">
            <p><strong>Par√°grafo Primeiro:</strong> ${contract.disposicoes_legais.lei_aplicavel}</p>
            <p><strong>Par√°grafo Segundo:</strong> ${contract.disposicoes_legais.foro_competente}</p>
            <p><strong>Par√°grafo Terceiro:</strong> ${contract.disposicoes_legais.alteracoes}</p>
        </div>
    </div>

    <div class="signatures-section">
        <div class="signature-date">
            ${getFieldValue("cidade", getFieldValue("local", "[Cidade]"))}, ${currentDate}
        </div>
        
        <div class="signatures-grid">
            <div class="signature-box">
                <div class="signature-line">
                    <div>CONTRATADO: ${getFieldValue("contratado_nome", "[Nome do Contratado]")}</div>
                </div>
            </div>
            <div class="signature-box">
                <div class="signature-line">
                    <div>CONTRATANTE: ${getFieldValue("contratante_nome", "[Nome do Contratante]")}</div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>`
}

// Template 2: Moderno Profissional
const generateModernTemplate = (
  title: string,
  contract: ProfessionalContract,
  allFields: Record<string, string>,
  lexmlReferences: any[],
  subscription?: any,
  advancedFieldsEnabled = false,
  sectionToggles: any = {},
) => {
  const currentDate = new Date().toLocaleDateString("pt-BR", {
    day: "2-digit",
    month: "long",
    year: "numeric",
  })

  // Usar o t√≠tulo do usu√°rio
  const contractTitle = title || contract.titulo_contrato

  // Fun√ß√£o ULTRA-INTELIGENTE para determinar terminologia jur√≠dica correta
  const getCorrectLegalTerminology = (documentNumber: string, fieldType: "contratante" | "contratado") => {
    // Detectar se √© CPF ou CNPJ baseado no formato
    const isCNPJ =
      /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(documentNumber) || documentNumber.replace(/\D/g, "").length === 14

    if (isCNPJ) {
      return {
        terminology: "com sede em",
        entityType: "jur√≠dica",
      }
    } else {
      return {
        terminology: "residente e domiciliado em",
        entityType: "f√≠sica",
      }
    }
  }

  // Fun√ß√£o MEGA-INTELIGENTE para obter valor do campo com terminologia correta
  const getFieldValue = (fieldName: string, placeholder: string, sectionName?: string) => {
    // Verificar se a se√ß√£o est√° ativa
    if (sectionName && sectionToggles) {
      const sectionKey = sectionName.toLowerCase()
      if (sectionToggles[sectionKey] === false) {
        return placeholder
      }
    }

    // Buscar valor nos campos extra√≠dos (prioridade m√°xima)
    if (allFields[fieldName] && allFields[fieldName] !== placeholder) {
      const value = allFields[fieldName]

      // VALIDA√á√ÉO ULTRA-RIGOROSA - Evitar dados incorretos

      // Se √© nome de pessoa, deve ter 2-5 palavras e n√£o conter endere√ßo
      if (fieldName.includes("nome") && fieldName.includes("contratado")) {
        const words = value.split(" ")
        if (
          words.length >= 2 &&
          words.length <= 5 &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP") &&
          !value.includes("Bairro")
        ) {
          return value
        }
      }

      // Se √© nome de empresa, deve conter palavras empresariais
      if (fieldName.includes("nome") && fieldName.includes("contratante")) {
        if (
          (value.includes("Ltda") ||
            value.includes("S.A.") ||
            value.includes("EIRELI") ||
            value.includes("Tecnologia") ||
            value.includes("Servi√ßos") ||
            value.includes("ME") ||
            value.includes("Solutions") ||
            value.includes("Digital")) &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP")
        ) {
          return value
        }
      }

      // Se √© CPF, deve ter formato correto
      if (fieldName.includes("cpf")) {
        if (/^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
      }

      // Se √© CNPJ, deve ter formato correto
      if (fieldName.includes("cnpj")) {
        if (/^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
      }

      // NOVA L√ìGICA: Se √© campo de endere√ßo, usar terminologia jur√≠dica correta
      if (fieldName.includes("endereco")) {
        const enderecoVariations = [
          fieldName,
          fieldName.replace("contratante_", "").replace("contratado_", ""),
          "endereco_empresa",
          "endereco_funcionario",
          "endereco_contratante",
          "endereco_contratado",
          "endereco",
        ]

        for (const variation of enderecoVariations) {
          if (allFields[variation] && allFields[variation].length > 15) {
            const endereco = allFields[variation]
            if (
              (endereco.startsWith("Rua") ||
                endereco.startsWith("Av.") ||
                endereco.startsWith("Avenida") ||
                endereco.startsWith("Alameda")) &&
              (endereco.includes(",") ||
                endereco.includes("Bairro") ||
                endereco.includes("CEP") ||
                endereco.includes("-"))
            ) {
              return endereco
            }
          }
        }
      }

      // Se passou em todas as valida√ß√µes, retornar o valor
      return value
    }

    // Buscar varia√ß√µes do nome do campo
    const fieldVariations = [
      fieldName,
      fieldName.replace(/_/g, ""),
      fieldName.replace(/contratante_/g, ""),
      fieldName.replace(/contratado_/g, ""),
    ]

    for (const variation of fieldVariations) {
      if (allFields[variation] && allFields[variation] !== placeholder) {
        const value = allFields[variation]

        // Aplicar as mesmas valida√ß√µes
        if (fieldName.includes("cpf") && /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
        if (fieldName.includes("cnpj") && /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
        if (
          fieldName.includes("endereco") &&
          (value.startsWith("Rua") || value.startsWith("Av.")) &&
          value.length > 10
        ) {
          return value
        }
        if (fieldName.includes("nome") && !value.includes("Rua") && !value.includes("CEP")) {
          return value
        }
      }
    }

    // Se n√£o encontrou nada v√°lido, usar placeholder
    return placeholder
  }

  // Fun√ß√£o para gerar texto das partes com terminologia jur√≠dica correta E DADOS COMPLETOS
  const generatePartyText = (type: "contratante" | "contratado") => {
    const nome = getFieldValue(`${type}_nome`, "[Nome Completo]", type)
    const cpf = getFieldValue(`${type}_cpf`, "", type)
    const cnpj = getFieldValue(`${type}_cnpj`, "", type)
    const endereco = getFieldValue(`${type}_endereco`, "[Endere√ßo Completo]", type)
    const email = getFieldValue(`${type}_email`, "", type)
    const telefone = getFieldValue(`${type}_telefone`, "", type)

    // Determinar qual documento usar e a terminologia correta
    const documento = cnpj || cpf || "[000.000.000-00]"
    const { terminology } = getCorrectLegalTerminology(documento, type)

    // Construir texto base
    let texto = `${nome}, inscrito no CPF/CNPJ n¬∫ ${documento}, ${terminology} ${endereco}`

    // Adicionar telefone se dispon√≠vel
    if (telefone && telefone !== "[Telefone]") {
      texto += `, telefone ${telefone}`
    }

    // Adicionar e-mail se dispon√≠vel
    if (email && email !== "[E-mail]" && email.includes("@")) {
      texto += `, e-mail ${email}`
    }

    texto += `, doravante denominado ${type.toUpperCase()}.`

    return texto
  }

  return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${contractTitle}</title>
    <style>
        /* Estilos gerais */
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f4f4f4;
            margin: 0;
            padding: 30mm;
            box-sizing: border-box;
            max-width: 210mm; /* Largura A4 */
            margin: 0 auto;
        }

        h1, h2, h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }

        .container {
            background: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        /* Header */
        .header {
            text-align: center;
            border-bottom: 2px solid #3498db;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #3498db;
            font-size: 2.5em;
            margin-bottom: 5px;
        }

        /* Se√ß√µes */
        .section {
            margin-bottom: 35px;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0,0,0,0.06);
            overflow: hidden;
            page-break-inside: avoid;
        }

        .section-title {
            background: #3498db;
            color: white;
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            font-size: 1.2em;
            font-weight: bold;
            border-radius: 12px 12px 0 0;
        }

        .section-content {
            padding: 20px;
            text-align: justify;
        }

        /* Listas */
        ul {
            list-style-type: square;
            padding-left: 20px;
        }

        ul li {
            margin-bottom: 8px;
        }

        /* Tabelas */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        /* Assinaturas */
        .signatures {
            margin-top: 50px;
            text-align: center;
            page-break-inside: avoid;
        }

        .signature-line {
            border-top: 2px solid #333;
            margin: 20px auto;
            width: 70%;
            padding-top: 10px;
        }

        .date {
            margin-top: 30px;
            font-style: italic;
            color: #777;
        }

        /* Media query para impress√£o */
        @media print {
            body {
                padding: 20mm;
            }

            .section {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }

        /* Espa√ßamento e alinhamento */
        p {
            margin-bottom: 15px;
            text-align: justify;
        }

        /* Parties Section */
        .parties-section {
            margin-bottom: 35px;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0,0,0,0.06);
            overflow: hidden;
            page-break-inside: avoid;
        }

        .parties-section-title {
            background: #3498db;
            color: white;
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            font-size: 1.2em;
            font-weight: bold;
            border-radius: 12px 12px 0 0;
        }

        .parties-section-content {
            padding: 20px;
            text-align: justify;
        }

        .party-info {
            margin-bottom: 20px;
            text-align: justify;
            page-break-inside: avoid;
        }

        .party-label {
            font-weight: bold;
            color: #3498db;
            display: block;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${contractTitle}</h1>
        </div>

        <div class="parties-section">
            <div class="parties-section-title">Partes Contratantes</div>
            <div class="parties-section-content">
                <div class="party-info">
                    <span class="party-label">Contratante:</span>
                    ${generatePartyText("contratante")}
                </div>
                <div class="party-info">
                    <span class="party-label">Contratado:</span>
                    ${generatePartyText("contratado")}
                </div>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Objeto do Contrato</div>
            <div class="section-content">
                <p>${contract.objeto_principal}</p>
                <p>${contract.objeto_detalhado}</p>
                <h3>Especifica√ß√µes T√©cnicas:</h3>
                <ul>
                    ${contract.especificacoes_tecnicas.map((spec) => `<li>${spec}</li>`).join("")}
                </ul>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Obriga√ß√µes do Contratado</div>
            <div class="section-content">
                <ul>
                    ${contract.obrigacoes_contratado.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
                </ul>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Obriga√ß√µes do Contratante</div>
            <div class="section-content">
                <ul>
                    ${contract.obrigacoes_contratante.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
                </ul>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Valor e Forma de Pagamento</div>
            <div class="section-content">
                <p><strong>Valor:</strong> ${contract.condicoes_pagamento.valor_base}</p>
                <p><strong>Forma:</strong> ${contract.condicoes_pagamento.forma_pagamento}</p>
                <p><strong>Prazos:</strong> ${contract.condicoes_pagamento.prazos}</p>
                <p><strong>Multas por Atraso:</strong> ${contract.condicoes_pagamento.multas_atraso}</p>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Prazo e Vig√™ncia</div>
            <div class="section-content">
                <p><strong>In√≠cio:</strong> ${contract.prazo_execucao.inicio}</p>
                <p><strong>Dura√ß√£o:</strong> ${contract.prazo_execucao.duracao}</p>
                <p><strong>Entrega:</strong> ${contract.prazo_execucao.entrega}</p>
            </div>
        </div>

        ${contract.clausulas_especiais
          .map(
            (clausula) => `
        <div class="section">
            <div class="section-title">${clausula.titulo}</div>
            <div class="section-content">
                <p>${clausula.conteudo}</p>
            </div>
        </div>
        `,
          )
          .join("")}

        <div class="section">
            <div class="section-title">Rescis√£o</div>
            <div class="section-content">
                <p><strong>Condi√ß√µes:</strong> ${contract.rescisao.condicoes}</p>
                <p><strong>Penalidades:</strong> ${contract.rescisao.penalidades}</p>
                <p><strong>Devolu√ß√µes:</strong> ${contract.rescisao.devolucoes}</p>
            </div>
        </div>

        <div class="section">
            <div class="section-title">Disposi√ß√µes Gerais</div>
            <div class="section-content">
                <p><strong>Lei Aplic√°vel:</strong> ${contract.disposicoes_legais.lei_aplicavel}</p>
                <p><strong>Foro Competente:</strong> ${contract.disposicoes_legais.foro_competente}</p>
                <p><strong>Altera√ß√µes:</strong> ${contract.disposicoes_legais.alteracoes}</p>
            </div>
        </div>

        <div class="signatures">
            <div class="signature-line">
                ${getFieldValue("contratante_nome", "[Nome do Contratante]")}
            </div>
            <div class="signature-line">
                ${getFieldValue("contratado_nome", "[Nome do Contratado]")}
            </div>
            <div class="date">${getFieldValue("cidade", getFieldValue("local", "[Cidade]"))}, ${currentDate}</div>
        </div>
    </div>
</body>
</html>`
}

// Template 3: Minimalista Profissional
const generateMinimalTemplate = (
  title: string,
  contract: ProfessionalContract,
  allFields: Record<string, string>,
  lexmlReferences: any[],
  subscription?: any,
  advancedFieldsEnabled = false,
  sectionToggles: any = {},
) => {
  const currentDate = new Date().toLocaleDateString("pt-BR", {
    day: "2-digit",
    month: "long",
    year: "numeric",
  })

  // Usar o t√≠tulo do usu√°rio
  const contractTitle = title || contract.titulo_contrato

  // Fun√ß√£o ULTRA-INTELIGENTE para determinar terminologia jur√≠dica correta
  const getCorrectLegalTerminology = (documentNumber: string, fieldType: "contratante" | "contratado") => {
    // Detectar se √© CPF ou CNPJ baseado no formato
    const isCNPJ =
      /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(documentNumber) || documentNumber.replace(/\D/g, "").length === 14

    if (isCNPJ) {
      return {
        terminology: "com sede em",
        entityType: "jur√≠dica",
      }
    } else {
      return {
        terminology: "residente e domiciliado em",
        entityType: "f√≠sica",
      }
    }
  }

  // Fun√ß√£o MEGA-INTELIGENTE para obter valor do campo com terminologia jur√≠dica correta
  const getFieldValue = (fieldName: string, placeholder: string, sectionName?: string) => {
    // Verificar se a se√ß√£o est√° ativa
    if (sectionName && sectionToggles) {
      const sectionKey = sectionName.toLowerCase()
      if (sectionToggles[sectionKey] === false) {
        return placeholder
      }
    }

    // Buscar valor nos campos extra√≠dos (prioridade m√°xima)
    if (allFields[fieldName] && allFields[fieldName] !== placeholder) {
      const value = allFields[fieldName]

      // VALIDA√á√ÉO ULTRA-RIGOROSA - Evitar dados incorretos

      // Se √© nome de pessoa, deve ter 2-5 palavras e n√£o conter endere√ßo
      if (fieldName.includes("nome") && fieldName.includes("contratado")) {
        const words = value.split(" ")
        if (
          words.length >= 2 &&
          words.length <= 5 &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP") &&
          !value.includes("Bairro")
        ) {
          return value
        }
      }

      // Se √© nome de empresa, deve conter palavras empresariais
      if (fieldName.includes("nome") && fieldName.includes("contratante")) {
        if (
          (value.includes("Ltda") ||
            value.includes("S.A.") ||
            value.includes("EIRELI") ||
            value.includes("Tecnologia") ||
            value.includes("Servi√ßos") ||
            value.includes("ME") ||
            value.includes("Solutions") ||
            value.includes("Digital")) &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP")
        ) {
          return value
        }
      }

      // Se √© CPF, deve ter formato correto
      if (fieldName.includes("cpf")) {
        if (/^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
      }

      // Se √© CNPJ, deve ter formato correto
      if (fieldName.includes("cnpj")) {
        if (/^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
      }

      // NOVA L√ìGICA: Se √© campo de endere√ßo, usar terminologia jur√≠dica correta
      if (fieldName.includes("endereco")) {
        const enderecoVariations = [
          fieldName,
          fieldName.replace("contratante_", "").replace("contratado_", ""),
          "endereco_empresa",
          "endereco_funcionario",
          "endereco_contratante",
          "endereco_contratado",
          "endereco",
        ]

        for (const variation of enderecoVariations) {
          if (allFields[variation] && allFields[variation].length > 15) {
            const endereco = allFields[variation]
            if (
              (endereco.startsWith("Rua") ||
                endereco.startsWith("Av.") ||
                endereco.startsWith("Avenida") ||
                endereco.startsWith("Alameda")) &&
              (endereco.includes(",") ||
                endereco.includes("Bairro") ||
                endereco.includes("CEP") ||
                endereco.includes("-"))
            ) {
              return endereco
            }
          }
        }
      }

      // Se passou em todas as valida√ß√µes, retornar o valor
      return value
    }

    // Buscar varia√ß√µes do nome do campo
    const fieldVariations = [
      fieldName,
      fieldName.replace(/_/g, ""),
      fieldName.replace(/contratante_/g, ""),
      fieldName.replace(/contratado_/g, ""),
    ]

    for (const variation of fieldVariations) {
      if (allFields[variation] && allFields[variation] !== placeholder) {
        const value = allFields[variation]

        // Aplicar as mesmas valida√ß√µes
        if (fieldName.includes("cpf") && /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
        if (fieldName.includes("cnpj") && /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
        if (
          fieldName.includes("endereco") &&
          (value.startsWith("Rua") || value.startsWith("Av.")) &&
          value.length > 10
        ) {
          return value
        }
        if (fieldName.includes("nome") && !value.includes("Rua") && !value.includes("CEP")) {
          return value
        }
      }
    }

    // Se n√£o encontrou nada v√°lido, usar placeholder
    return placeholder
  }

  // Fun√ß√£o para gerar texto das partes com terminologia jur√≠dica correta E DADOS COMPLETOS
  const generatePartyText = (type: "contratante" | "contratado") => {
    const nome = getFieldValue(`${type}_nome`, "[Nome Completo]", type)
    const cpf = getFieldValue(`${type}_cpf`, "", type)
    const cnpj = getFieldValue(`${type}_cnpj`, "", type)
    const endereco = getFieldValue(`${type}_endereco`, "[Endere√ßo Completo]", type)
    const email = getFieldValue(`${type}_email`, "", type)
    const telefone = getFieldValue(`${type}_telefone`, "", type)

    // Determinar qual documento usar e a terminologia correta
    const documento = cnpj || cpf || "[000.000.000-00]"
    const { terminology } = getCorrectLegalTerminology(documento, type)

    // Construir texto base
    let texto = `${nome}, inscrito no CPF/CNPJ n¬∫ ${documento}, ${terminology} ${endereco}`

    // Adicionar telefone se dispon√≠vel
    if (telefone && telefone !== "[Telefone]") {
      texto += `, telefone ${telefone}`
    }

    // Adicionar e-mail se dispon√≠vel
    if (email && email !== "[E-mail]" && email.includes("@")) {
      texto += `, e-mail ${email}`
    }

    texto += `, doravante denominado ${type.toUpperCase()}.`

    return texto
  }

  return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${contractTitle}</title>
    <style>
        body {
            font-family: 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 30mm;
            max-width: 210mm;
            margin: 0 auto;
            background: #f8f8f8;
        }

        .container {
            background: #fff;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        h1 {
            font-size: 2.2em;
            color: #444;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }

        h2 {
            font-size: 1.6em;
            color: #555;
            margin-top: 30px;
            margin-bottom: 15px;
        }

        p {
            margin-bottom: 15px;
            color: #666;
            text-align: justify;
        }

        ul {
            list-style-type: square;
            padding-left: 20px;
            color: #666;
        }

        li {
            margin-bottom: 8px;
        }

        .section {
            margin-bottom: 30px;
            page-break-inside: avoid;
        }

        .parties-section {
            margin-bottom: 30px;
            page-break-inside: avoid;
        }

        .signatures {
            margin-top: 40px;
            text-align: center;
            page-break-inside: avoid;
        }

        .signature-line {
            border-top: 1px solid #888;
            margin: 20px auto;
            width: 60%;
            padding-top: 10px;
            color: #777;
        }

        .date {
            font-style: italic;
            color: #999;
            margin-top: 10px;
        }

        @media print {
            body {
                padding: 20mm;
            }

            .container {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }

        .parties-section-title {
            font-size: 1.6em;
            color: #555;
            margin-top: 30px;
            margin-bottom: 15px;
        }

        .party-info {
            margin-bottom: 20px;
            text-align: justify;
            page-break-inside: avoid;
        }

        .party-label {
            font-weight: bold;
            color: #3498db;
            display: block;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>${contractTitle}</h1>

        <div class="parties-section">
            <h2 class="parties-section-title">Partes Contratantes</h2>
            <div class="party-info">
                <span class="party-label">Contratante:</span>
                ${generatePartyText("contratante")}
            </div>
            <div class="party-info">
                <span class="party-label">Contratado:</span>
                ${generatePartyText("contratado")}
            </div>
        </div>

        <div class="section">
            <h2>Objeto do Contrato</h2>
            <p>${contract.objeto_principal}</p>
            <p>${contract.objeto_detalhado}</p>
            <h3>Especifica√ß√µes T√©cnicas:</h3>
            <ul>
                ${contract.especificacoes_tecnicas.map((spec) => `<li>${spec}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Obriga√ß√µes do Contratado</h2>
            <ul>
                ${contract.obrigacoes_contratado.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Obriga√ß√µes do Contratante</h2>
            <ul>
                ${contract.obrigacoes_contratante.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Valor e Forma de Pagamento</h2>
            <p><strong>Valor:</strong> ${contract.condicoes_pagamento.valor_base}</p>
            <p><strong>Forma:</strong> ${contract.condicoes_pagamento.forma_pagamento}</p>
            <p><strong>Prazos:</strong> ${contract.condicoes_pagamento.prazos}</p>
            <p><strong>Multas por Atraso:</strong> ${contract.condicoes_pagamento.multas_atraso}</p>
        </div>

        <div class="section">
            <h2>Prazo e Vig√™ncia</h2>
            <p><strong>In√≠cio:</strong> ${contract.prazo_execucao.inicio}</p>
            <p><strong>Dura√ß√£o:</strong> ${contract.prazo_execucao.duracao}</p>
            <p><strong>Entrega:</strong> ${contract.prazo_execucao.entrega}</p>
        </div>

        ${contract.clausulas_especiais
          .map(
            (clausula) => `
        <div class="section">
            <h2>${clausula.titulo}</h2>
            <p>${clausula.conteudo}</p>
        </div>
        `,
          )
          .join("")}

        <div class="section">
            <h2>Rescis√£o</h2>
            <p><strong>Condi√ß√µes:</strong> ${contract.rescisao.condicoes}</p>
            <p><strong>Penalidades:</strong> ${contract.rescisao.penalidades}</p>
            <p><strong>Devolu√ß√µes:</strong> ${contract.rescisao.devolucoes}</p>
        </div>

        <div class="section">
            <h2>Disposi√ß√µes Gerais</h2>
            <p><strong>Lei Aplic√°vel:</strong> ${contract.disposicoes_legais.lei_aplicavel}</p>
            <p><strong>Foro Competente:</strong> ${contract.disposicoes_legais.foro_competente}</p>
            <p><strong>Altera√ß√µes:</strong> ${contract.disposicoes_legais.alteracoes}</p>
        </div>

        <div class="signatures">
            <div class="signature-line">
                ${getFieldValue("contratante_nome", "[Nome do Contratante]")}
            </div>
            <div class="signature-line">
                ${getFieldValue("contratado_nome", "[Nome do Contratado]")}
            </div>
            <div class="date">${getFieldValue("cidade", getFieldValue("local", "[Cidade]"))}, ${currentDate}</div>
        </div>
    </div>
</body>
</html>`
}

// Template 4: Corporativo Profissional
const generateCorporateTemplate = (
  title: string,
  contract: ProfessionalContract,
  allFields: Record<string, string>,
  lexmlReferences: any[],
  subscription?: any,
  advancedFieldsEnabled = false,
  sectionToggles: any = {},
) => {
  const currentDate = new Date().toLocaleDateString("pt-BR", {
    day: "2-digit",
    month: "long",
    year: "numeric",
  })

  // Usar o t√≠tulo do usu√°rio
  const contractTitle = title || contract.titulo_contrato

  // Fun√ß√£o ULTRA-INTELIGENTE para determinar terminologia jur√≠dica correta
  const getCorrectLegalTerminology = (documentNumber: string, fieldType: "contratante" | "contratado") => {
    // Detectar se √© CPF ou CNPJ baseado no formato
    const isCNPJ =
      /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(documentNumber) || documentNumber.replace(/\D/g, "").length === 14

    if (isCNPJ) {
      return {
        terminology: "com sede em",
        entityType: "jur√≠dica",
      }
    } else {
      return {
        terminology: "residente e domiciliado em",
        entityType: "f√≠sica",
      }
    }
  }

  // Fun√ß√£o MEGA-INTELIGENTE para obter valor do campo com terminologia jur√≠dica correta
  const getFieldValue = (fieldName: string, placeholder: string, sectionName?: string) => {
    // Verificar se a se√ß√£o est√° ativa
    if (sectionName && sectionToggles) {
      const sectionKey = sectionName.toLowerCase()
      if (sectionToggles[sectionKey] === false) {
        return placeholder
      }
    }

    // Buscar valor nos campos extra√≠dos (prioridade m√°xima)
    if (allFields[fieldName] && allFields[fieldName] !== placeholder) {
      const value = allFields[fieldName]

      // VALIDA√á√ÉO ULTRA-RIGOROSA - Evitar dados incorretos

      // Se √© nome de pessoa, deve ter 2-5 palavras e n√£o conter endere√ßo
      if (fieldName.includes("nome") && fieldName.includes("contratado")) {
        const words = value.split(" ")
        if (
          words.length >= 2 &&
          words.length <= 5 &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP") &&
          !value.includes("Bairro")
        ) {
          return value
        }
      }

      // Se √© nome de empresa, deve conter palavras empresariais
      if (fieldName.includes("nome") && fieldName.includes("contratante")) {
        if (
          (value.includes("Ltda") ||
            value.includes("S.A.") ||
            value.includes("EIRELI") ||
            value.includes("Tecnologia") ||
            value.includes("Servi√ßos") ||
            value.includes("ME") ||
            value.includes("Solutions") ||
            value.includes("Digital")) &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP")
        ) {
          return value
        }
      }

      // Se √© CPF, deve ter formato correto
      if (fieldName.includes("cpf")) {
        if (/^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
      }

      // Se √© CNPJ, deve ter formato correto
      if (fieldName.includes("cnpj")) {
        if (/^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
      }

      // NOVA L√ìGICA: Se √© campo de endere√ßo, usar terminologia jur√≠dica correta
      if (fieldName.includes("endereco")) {
        const enderecoVariations = [
          fieldName,
          fieldName.replace("contratante_", "").replace("contratado_", ""),
          "endereco_empresa",
          "endereco_funcionario",
          "endereco_contratante",
          "endereco_contratado",
          "endereco",
        ]

        for (const variation of enderecoVariations) {
          if (allFields[variation] && allFields[variation].length > 15) {
            const endereco = allFields[variation]
            if (
              (endereco.startsWith("Rua") ||
                endereco.startsWith("Av.") ||
                endereco.startsWith("Avenida") ||
                endereco.startsWith("Alameda")) &&
              (endereco.includes(",") ||
                endereco.includes("Bairro") ||
                endereco.includes("CEP") ||
                endereco.includes("-"))
            ) {
              return endereco
            }
          }
        }
      }

      // Se passou em todas as valida√ß√µes, retornar o valor
      return value
    }

    // Buscar varia√ß√µes do nome do campo
    const fieldVariations = [
      fieldName,
      fieldName.replace(/_/g, ""),
      fieldName.replace(/contratante_/g, ""),
      fieldName.replace(/contratado_/g, ""),
    ]

    for (const variation of fieldVariations) {
      if (allFields[variation] && allFields[variation] !== placeholder) {
        const value = allFields[variation]

        // Aplicar as mesmas valida√ß√µes
        if (fieldName.includes("cpf") && /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
        if (fieldName.includes("cnpj") && /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
        if (
          fieldName.includes("endereco") &&
          (value.startsWith("Rua") || value.startsWith("Av.")) &&
          value.length > 10
        ) {
          return value
        }
        if (fieldName.includes("nome") && !value.includes("Rua") && !value.includes("CEP")) {
          return value
        }
      }
    }

    // Se n√£o encontrou nada v√°lido, usar placeholder
    return placeholder
  }

  // Fun√ß√£o para gerar texto das partes com terminologia jur√≠dica correta E DADOS COMPLETOS
  const generatePartyText = (type: "contratante" | "contratado") => {
    const nome = getFieldValue(`${type}_nome`, "[Nome Completo]", type)
    const cpf = getFieldValue(`${type}_cpf`, "", type)
    const cnpj = getFieldValue(`${type}_cnpj`, "", type)
    const endereco = getFieldValue(`${type}_endereco`, "[Endere√ßo Completo]", type)
    const email = getFieldValue(`${type}_email`, "", type)
    const telefone = getFieldValue(`${type}_telefone`, "", type)

    // Determinar qual documento usar e a terminologia correta
    const documento = cnpj || cpf || "[000.000.000-00]"
    const { terminology } = getCorrectLegalTerminology(documento, type)

    // Construir texto base
    let texto = `${nome}, inscrito no CPF/CNPJ n¬∫ ${documento}, ${terminology} ${endereco}`

    // Adicionar telefone se dispon√≠vel
    if (telefone && telefone !== "[Telefone]") {
      texto += `, telefone ${telefone}`
    }

    // Adicionar e-mail se dispon√≠vel
    if (email && email !== "[E-mail]" && email.includes("@")) {
      texto += `, e-mail ${email}`
    }

    texto += `, doravante denominado ${type.toUpperCase()}.`

    return texto
  }

  return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${contractTitle}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.7;
            color: #333;
            margin: 0;
            padding: 30mm;
            max-width: 210mm;
            margin: 0 auto;
            background: #f9f9f9;
        }

        .container {
            background: #fff;
            padding: 50px;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.07);
        }

        h1 {
            font-size: 2.6em;
            color: #2d3e50;
            margin-bottom: 25px;
            border-bottom: 3px solid #e1e1e1;
            padding-bottom: 12px;
        }

        h2 {
            font-size: 1.8em;
            color: #34495e;
            margin-top: 35px;
            margin-bottom: 20px;
        }

        p {
            margin-bottom: 18px;
            color: #444;
            text-align: justify;
        }

        ul {
            list-style-type: disc;
            padding-left: 22px;
            color: #444;
        }

        li {
            margin-bottom: 10px;
        }

        .section {
            margin-bottom: 40px;
            page-break-inside: avoid;
        }

        .parties-section {
            margin-bottom: 40px;
            page-break-inside: avoid;
        }

        .signatures {
            margin-top: 50px;
            text-align: center;
            page-break-inside: avoid;
        }

        .signature-line {
            border-top: 2px solid #777;
            margin: 25px auto;
            width: 65%;
            padding-top: 12px;
            color: #555;
        }

        .date {
            font-style: italic;
            color: #888;
            margin-top: 15px;
        }

        @media print {
            body {
                padding: 25mm;
            }

            .container {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }

        .parties-section-title {
            font-size: 1.8em;
            color: #34495e;
            margin-top: 35px;
            margin-bottom: 20px;
        }

        .party-info {
            margin-bottom: 25px;
            text-align: justify;
            page-break-inside: avoid;
        }

        .party-label {
            font-weight: bold;
            color: #3498db;
            display: block;
            margin-bottom: 6px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>${contractTitle}</h1>

        <div class="parties-section">
            <h2 class="parties-section-title">Partes Contratantes</h2>
            <div class="party-info">
                <span class="party-label">Contratante:</span>
                ${generatePartyText("contratante")}
            </div>
            <div class="party-info">
                <span class="party-label">Contratado:</span>
                ${generatePartyText("contratado")}
            </div>
        </div>

        <div class="section">
            <h2>Objeto do Contrato</h2>
            <p>${contract.objeto_principal}</p>
            <p>${contract.objeto_detalhado}</p>
            <h3>Especifica√ß√µes T√©cnicas:</h3>
            <ul>
                ${contract.especificacoes_tecnicas.map((spec) => `<li>${spec}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Obriga√ß√µes do Contratado</h2>
            <ul>
                ${contract.obrigacoes_contratado.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Obriga√ß√µes do Contratante</h2>
            <ul>
                ${contract.obrigacoes_contratante.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Valor e Forma de Pagamento</h2>
            <p><strong>Valor:</strong> ${contract.condicoes_pagamento.valor_base}</p>
            <p><strong>Forma:</strong> ${contract.condicoes_pagamento.forma_pagamento}</p>
            <p><strong>Prazos:</strong> ${contract.condicoes_pagamento.prazos}</p>
            <p><strong>Multas por Atraso:</strong> ${contract.condicoes_pagamento.multas_atraso}</p>
        </div>

        <div class="section">
            <h2>Prazo e Vig√™ncia</h2>
            <p><strong>In√≠cio:</strong> ${contract.prazo_execucao.inicio}</p>
            <p><strong>Dura√ß√£o:</strong> ${contract.prazo_execucao.duracao}</p>
            <p><strong>Entrega:</strong> ${contract.prazo_execucao.entrega}</p>
        </div>

        ${contract.clausulas_especiais
          .map(
            (clausula) => `
        <div class="section">
            <h2>${clausula.titulo}</h2>
            <p>${clausula.conteudo}</p>
        </div>
        `,
          )
          .join("")}

        <div class="section">
            <h2>Rescis√£o</h2>
            <p><strong>Condi√ß√µes:</strong> ${contract.rescisao.condicoes}</p>
            <p><strong>Penalidades:</strong> ${contract.rescisao.penalidades}</p>
            <p><strong>Devolu√ß√µes:</strong> ${contract.rescisao.devolucoes}</p>
        </div>

        <div class="section">
            <h2>Disposi√ß√µes Gerais</h2>
            <p><strong>Lei Aplic√°vel:</strong> ${contract.disposicoes_legais.lei_aplicavel}</p>
            <p><strong>Foro Competente:</strong> ${contract.disposicoes_legais.foro_competente}</p>
            <p><strong>Altera√ß√µes:</strong> ${contract.disposicoes_legais.alteracoes}</p>
        </div>

        <div class="signatures">
            <div class="signature-line">
                ${getFieldValue("contratante_nome", "[Nome do Contratante]")}
            </div>
            <div class="signature-line">
                ${getFieldValue("contratado_nome", "[Nome do Contratado]")}
            </div>
            <div class="date">${getFieldValue("cidade", getFieldValue("local", "[Cidade]"))}, ${currentDate}</div>
        </div>
    </div>
</body>
</html>`
}

// Template 5: Criativo Profissional
const generateCreativeTemplate = (
  title: string,
  contract: ProfessionalContract,
  allFields: Record<string, string>,
  lexmlReferences: any[],
  subscription?: any,
  advancedFieldsEnabled = false,
  sectionToggles: any = {},
) => {
  const currentDate = new Date().toLocaleDateString("pt-BR", {
    day: "2-digit",
    month: "long",
    year: "numeric",
  })

  // Usar o t√≠tulo do usu√°rio
  const contractTitle = title || contract.titulo_contrato

  // Fun√ß√£o ULTRA-INTELIGENTE para determinar terminologia jur√≠dica correta
  const getCorrectLegalTerminology = (documentNumber: string, fieldType: "contratante" | "contratado") => {
    // Detectar se √© CPF ou CNPJ baseado no formato
    const isCNPJ =
      /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(documentNumber) || documentNumber.replace(/\D/g, "").length === 14

    if (isCNPJ) {
      return {
        terminology: "com sede em",
        entityType: "jur√≠dica",
      }
    } else {
      return {
        terminology: "residente e domiciliado em",
        entityType: "f√≠sica",
      }
    }
  }

  // Fun√ß√£o MEGA-INTELIGENTE para obter valor do campo com terminologia jur√≠dica correta
  const getFieldValue = (fieldName: string, placeholder: string, sectionName?: string) => {
    // Verificar se a se√ß√£o est√° ativa
    if (sectionName && sectionToggles) {
      const sectionKey = sectionName.toLowerCase()
      if (sectionToggles[sectionKey] === false) {
        return placeholder
      }
    }

    // Buscar valor nos campos extra√≠dos (prioridade m√°xima)
    if (allFields[fieldName] && allFields[fieldName] !== placeholder) {
      const value = allFields[fieldName]

      // VALIDA√á√ÉO ULTRA-RIGOROSA - Evitar dados incorretos

      // Se √© nome de pessoa, deve ter 2-5 palavras e n√£o conter endere√ßo
      if (fieldName.includes("nome") && fieldName.includes("contratado")) {
        const words = value.split(" ")
        if (
          words.length >= 2 &&
          words.length <= 5 &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP") &&
          !value.includes("Bairro")
        ) {
          return value
        }
      }

      // Se √© nome de empresa, deve conter palavras empresariais
      if (fieldName.includes("nome") && fieldName.includes("contratante")) {
        if (
          (value.includes("Ltda") ||
            value.includes("S.A.") ||
            value.includes("EIRELI") ||
            value.includes("Tecnologia") ||
            value.includes("Servi√ßos") ||
            value.includes("ME") ||
            value.includes("Solutions") ||
            value.includes("Digital")) &&
          !value.includes("Rua") &&
          !value.includes("Av.") &&
          !value.includes("CEP")
        ) {
          return value
        }
      }

      // Se √© CPF, deve ter formato correto
      if (fieldName.includes("cpf")) {
        if (/^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
      }

      // Se √© CNPJ, deve ter formato correto
      if (fieldName.includes("cnpj")) {
        if (/^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
      }

      // NOVA L√ìGICA: Se √© campo de endere√ßo, usar terminologia jur√≠dica correta
      if (fieldName.includes("endereco")) {
        const enderecoVariations = [
          fieldName,
          fieldName.replace("contratante_", "").replace("contratado_", ""),
          "endereco_empresa",
          "endereco_funcionario",
          "endereco_contratante",
          "endereco_contratado",
          "endereco",
        ]

        for (const variation of enderecoVariations) {
          if (allFields[variation] && allFields[variation].length > 15) {
            const endereco = allFields[variation]
            if (
              (endereco.startsWith("Rua") ||
                endereco.startsWith("Av.") ||
                endereco.startsWith("Avenida") ||
                endereco.startsWith("Alameda")) &&
              (endereco.includes(",") ||
                endereco.includes("Bairro") ||
                endereco.includes("CEP") ||
                endereco.includes("-"))
            ) {
              return endereco
            }
          }
        }
      }

      // Se passou em todas as valida√ß√µes, retornar o valor
      return value
    }

    // Buscar varia√ß√µes do nome do campo
    const fieldVariations = [
      fieldName,
      fieldName.replace(/_/g, ""),
      fieldName.replace(/contratante_/g, ""),
      fieldName.replace(/contratado_/g, ""),
    ]

    for (const variation of fieldVariations) {
      if (allFields[variation] && allFields[variation] !== placeholder) {
        const value = allFields[variation]

        // Aplicar as mesmas valida√ß√µes
        if (fieldName.includes("cpf") && /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(value)) {
          return value
        }
        if (fieldName.includes("cnpj") && /^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$/.test(value)) {
          return value
        }
        if (
          fieldName.includes("endereco") &&
          (value.startsWith("Rua") || value.startsWith("Av.")) &&
          value.length > 10
        ) {
          return value
        }
        if (fieldName.includes("nome") && !value.includes("Rua") && !value.includes("CEP")) {
          return value
        }
      }
    }

    // Se n√£o encontrou nada v√°lido, usar placeholder
    return placeholder
  }

  // Fun√ß√£o para gerar texto das partes com terminologia jur√≠dica correta E DADOS COMPLETOS
  const generatePartyText = (type: "contratante" | "contratado") => {
    const nome = getFieldValue(`${type}_nome`, "[Nome Completo]", type)
    const cpf = getFieldValue(`${type}_cpf`, "", type)
    const cnpj = getFieldValue(`${type}_cnpj`, "", type)
    const endereco = getFieldValue(`${type}_endereco`, "[Endere√ßo Completo]", type)
    const email = getFieldValue(`${type}_email`, "", type)
    const telefone = getFieldValue(`${type}_telefone`, "", type)

    // Determinar qual documento usar e a terminologia correta
    const documento = cnpj || cpf || "[000.000.000-00]"
    const { terminology } = getCorrectLegalTerminology(documento, type)

    // Construir texto base
    let texto = `${nome}, inscrito no CPF/CNPJ n¬∫ ${documento}, ${terminology} ${endereco}`

    // Adicionar telefone se dispon√≠vel
    if (telefone && telefone !== "[Telefone]") {
      texto += `, telefone ${telefone}`
    }

    // Adicionar e-mail se dispon√≠vel
    if (email && email !== "[E-mail]" && email.includes("@")) {
      texto += `, e-mail ${email}`
    }

    texto += `, doravante denominado ${type.toUpperCase()}.`

    return texto
  }

  return `<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${contractTitle}</title>
    <style>
        body {
            font-family: 'Open Sans', sans-serif;
            line-height: 1.8;
            color: #333;
            margin: 0;
            padding: 30mm;
            max-width: 210mm;
            margin: 0 auto;
            background: #f9f9f9;
        }

        .container {
            background: #fff;
            padding: 60px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        }

        h1 {
            font-size: 2.8em;
            color: #333;
            margin-bottom: 30px;
            border-bottom: 4px solid #eee;
            padding-bottom: 15px;
            text-align: center;
        }

        h2 {
            font-size: 2em;
            color: #444;
            margin-top: 40px;
            margin-bottom: 25px;
        }

        p {
            margin-bottom: 20px;
            color: #555;
            text-align: justify;
        }

        ul {
            list-style-type: none;
            padding-left: 0;
            color: #555;
        }

        li {
            margin-bottom: 12px;
            padding-left: 25px;
            position: relative;
        }

        li:before {
            content: '‚úì';
            position: absolute;
            left: 0;
            color: #5cb85c;
        }

        .section {
            margin-bottom: 45px;
            page-break-inside: avoid;
        }

        .parties-section {
            margin-bottom: 45px;
            page-break-inside: avoid;
        }

        .signatures {
            margin-top: 55px;
            text-align: center;
            page-break-inside: avoid;
        }

        .signature-line {
            border-top: 3px solid #888;
            margin: 30px auto;
            width: 70%;
            padding-top: 15px;
            color: #666;
        }

        .date {
            font-style: italic;
            color: #999;
            margin-top: 20px;
            text-align: center;
        }

        @media print {
            body {
                padding: 25mm;
            }

            .container {
                box-shadow: none;
                border: 1px solid #ddd;
            }
        }

        .parties-section-title {
            font-size: 2em;
            color: #444;
            margin-top: 40px;
            margin-bottom: 25px;
            text-align: left;
        }

        .party-info {
            margin-bottom: 30px;
            text-align: justify;
            page-break-inside: avoid;
        }

        .party-label {
            font-weight: bold;
            color: #3498db;
            display: block;
            margin-bottom: 8px;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>${contractTitle}</h1>

        <div class="parties-section">
            <h2 class="parties-section-title">Partes Contratantes</h2>
            <div class="party-info">
                <span class="party-label">Contratante:</span>
                ${generatePartyText("contratante")}
            </div>
            <div class="party-info">
                <span class="party-label">Contratado:</span>
                ${generatePartyText("contratado")}
            </div>
        </div>

        <div class="section">
            <h2>Objeto do Contrato</h2>
            <p>${contract.objeto_principal}</p>
            <p>${contract.objeto_detalhado}</p>
            <h3>Especifica√ß√µes T√©cnicas:</h3>
            <ul>
                ${contract.especificacoes_tecnicas.map((spec) => `<li>${spec}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Obriga√ß√µes do Contratado</h2>
            <ul>
                ${contract.obrigacoes_contratado.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Obriga√ß√µes do Contratante</h2>
            <ul>
                ${contract.obrigacoes_contratante.map((obrigacao) => `<li>${obrigacao}</li>`).join("")}
            </ul>
        </div>

        <div class="section">
            <h2>Valor e Forma de Pagamento</h2>
            <p><strong>Valor:</strong> ${contract.condicoes_pagamento.valor_base}</p>
            <p><strong>Forma:</strong> ${contract.condicoes_pagamento.forma_pagamento}</p>
            <p><strong>Prazos:</strong> ${contract.condicoes_pagamento.prazos}</p>
            <p><strong>Multas por Atraso:</strong> ${contract.condicoes_pagamento.multas_atraso}</p>
        </div>

        <div class="section">
            <h2>Prazo e Vig√™ncia</h2>
            <p><strong>In√≠cio:</strong> ${contract.prazo_execucao.inicio}</p>
            <p><strong>Dura√ß√£o:</strong> ${contract.prazo_execucao.duracao}</p>
            <p><strong>Entrega:</strong> ${contract.prazo_execucao.entrega}</p>
        </div>

        ${contract.clausulas_especiais
          .map(
            (clausula) => `
        <div class="section">
            <h2>${clausula.titulo}</h2>
            <p>${clausula.conteudo}</p>
        </div>
        `,
          )
          .join("")}

        <div class="section">
            <h2>Rescis√£o</h2>
            <p><strong>Condi√ß√µes:</strong> ${contract.rescisao.condicoes}</p>
            <p><strong>Penalidades:</strong> ${contract.rescisao.penalidades}</p>
            <p><strong>Devolu√ß√µes:</strong> ${contract.rescisao.devolucoes}</p>
        </div>

        <div class="section">
            <h2>Disposi√ß√µes Gerais</h2>
            <p><strong>Lei Aplic√°vel:</strong> ${contract.disposicoes_legais.lei_aplicavel}</p>
            <p><strong>Foro Competente:</strong> ${contract.disposicoes_legais.foro_competente}</p>
            <p><strong>Altera√ß√µes:</strong> ${contract.disposicoes_legais.alteracoes}</p>
        </div>

        <div class="signatures">
            <div class="signature-line">
                ${getFieldValue("contratante_nome", "[Nome do Contratante]")}
            </div>
            <div class="signature-line">
                ${getFieldValue("contratado_nome", "[Nome do Contratado]")}
            </div>
            <div class="date">${getFieldValue("cidade", getFieldValue("local", "[Cidade]"))}, ${currentDate}</div>
        </div>
    </div>
</body>
</html>`
}

// Aplicar as mesmas melhorias para todos os outros templates...
// (Os outros templates seguem o mesmo padr√£o, aplicando a fun√ß√£o generatePartyText)

export async function POST(request: NextRequest) {
  try {
    const supabase = createRouteHandlerClient({ cookies })

    // Verificar autentica√ß√£o
    const {
      data: { session },
    } = await supabase.auth.getSession()

    if (!session) {
      return NextResponse.json({ error: "N√£o autorizado" }, { status: 401 })
    }

    // Validar entrada
    const body = await request.json().catch(() => ({}))

    // Mapear campos do frontend para o schema
    const mappedBody = {
      prompt: body.prompt || body.description,
      contractType: body.contractType,
      fields: body.fields || {},
      title: body.title,
      temperature: body.temperature,
      maxTokens: body.maxTokens,
      customPrompt: body.customPrompt,
      lexmlData: body.lexmlData,
      cacheKey: body.cacheKey,
      fieldMetadata: body.fieldMetadata,
      template: body.template || "classic",
      advancedFieldsEnabled: body.advancedFieldsEnabled,
      languageStyle: body.languageStyle,
      enhancedLexML: body.enhancedLexML,
      contractRefinements: body.contractRefinements,
      languagePrompt: body.languagePrompt,
      sectionToggles: body.sectionToggles,
      includeLegalNumbers: body.includeLegalNumbers,
    }

    const validatedData = GenerateSchema.parse(mappedBody)
    const {
      prompt,
      contractType,
      fields,
      title,
      temperature,
      maxTokens,
      customPrompt,
      lexmlData,
      cacheKey,
      fieldMetadata,
      template,
      advancedFieldsEnabled,
      languageStyle,
      enhancedLexML,
      contractRefinements,
      languagePrompt,
      sectionToggles,
      includeLegalNumbers,
    } = validatedData

    // NOVO: Extrai entidades do prompt para preenchimento autom√°tico
    const extractedEntities = extractAndClassifyEntities(prompt, title || "")

    // Achata os campos inseridos manualmente pelo usu√°rio
    const flattenedFields = flattenFieldMetadata(fieldMetadata, sectionToggles)

    // Combina os campos com a prioridade correta:
    // 1. Campos manuais (flattenedFields) t√™m a maior prioridade.
    // 2. Campos extra√≠dos do prompt (extractedEntities) s√£o usados como fallback.
    // 3. Campos antigos (fields) como √∫ltima op√ß√£o.
    const allFields = { ...flattenedFields, ...extractedEntities, ...fields }

    // Verificar cache se fornecido
    const finalCacheKey = cacheKey || generateCacheKey(prompt, contractType, allFields, title)

    if (finalCacheKey) {
      try {
        const { data: cachedContract } = await supabase
          .from("contract_cache")
          .select("generated_content, created_at")
          .eq("cache_key", finalCacheKey)
          .eq("user_id", session.user.id)
          .single()

        if (cachedContract) {
          const cacheAge = Date.now() - new Date(cachedContract.created_at).getTime()
          const maxCacheAge = 24 * 60 * 60 * 1000 // 24 horas

          if (cacheAge < maxCacheAge) {
            return NextResponse.json({
              content: cachedContract.generated_content,
              html: cachedContract.generated_content,
              cached: true,
              model: contractType === "advanced" ? "gpt-4o-mini" : "gpt-3.5-turbo",
              tokens_used: 0,
            })
          }
        }
      } catch (cacheError) {
        console.warn("Erro ao verificar cache:", cacheError)
      }
    }

    // Verificar cr√©ditos do usu√°rio
    const { data: subscription } = await supabase
      .from("subscriptions")
      .select("*")
      .eq("user_id", session.user.id)
      .single()

    if (subscription) {
      const hasCredits =
        contractType === "simple" ? subscription.creditos_simples > 0 : subscription.creditos_avancados > 0

      if (!hasCredits) {
        return NextResponse.json({ error: "Cr√©ditos insuficientes" }, { status: 403 })
      }
    }

    // Configura√ß√£o do modelo baseada no tipo de contrato
    const model = contractType === "advanced" ? "gpt-4o-mini" : "gpt-3.5-turbo"
    const finalTemperature = temperature || (contractType === "advanced" ? 0.5 : 0.2)
    const finalMaxTokens = maxTokens || (contractType === "advanced" ? 4000 : 2500)

    // Buscar refer√™ncias LexML com configura√ß√£o aprimorada
    const lexmlReferences = await fetchLexMLReferences(prompt, title, enhancedLexML)

    // Gerar contrato profissional via OpenAI com novas configura√ß√µes
    const professionalContract = await generateProfessionalContract(
      prompt,
      title || "Contrato de Presta√ß√£o de Servi√ßos",
      contractType,
      customPrompt,
      lexmlReferences.references,
      finalTemperature,
      finalMaxTokens,
      languagePrompt,
      contractRefinements,
      sectionToggles,
      includeLegalNumbers,
    )

    // Selecionar fun√ß√£o de template baseada na escolha do usu√°rio
    const templateFunctions = {
      classic: generateClassicTemplate,
      modern: generateModernTemplate, // Certifique-se que generateModernTemplate est√° definido e correto
      minimal: generateMinimalTemplate, // Certifique-se que generateMinimalTemplate est√° definido e correto
      corporate: generateCorporateTemplate, // Certifique-se que generateCorporateTemplate est√° definido e correto
      creative: generateCreativeTemplate, // Certifique-se que generateCreativeTemplate est√° definido e correto
    }

    const selectedTemplateFunction =
      templateFunctions[template as keyof typeof templateFunctions] || generateClassicTemplate

    // Gerar contrato usando o template selecionado com conte√∫do profissional
    const content = selectedTemplateFunction(
      title || "Contrato de Presta√ß√£o de Servi√ßos",
      professionalContract,
      allFields,
      lexmlReferences.references,
      subscription,
      advancedFieldsEnabled,
      sectionToggles,
    )

    // Verificar se o conte√∫do foi gerado
    if (!content || content.trim().length === 0) {
      throw new Error("Falha ao gerar conte√∫do do contrato")
    }

    // Validar tamanho do documento (m√°ximo 80.000 caracteres)
    let finalContent = content
    if (content.length > 80000) {
      finalContent = content.substring(0, 80000) + "\n\n[Documento truncado devido ao limite de caracteres]"
    }

    // Salvar no cache
    try {
      await supabase.from("contract_cache").upsert({
        cache_key: finalCacheKey,
        prompt_hash: finalCacheKey.substring(0, 32),
        contract_type: contractType,
        prompt_text: `${title || ""}\n\n${prompt}`,
        generated_content: finalContent,
        openai_model: model,
        temperature: finalTemperature,
        max_tokens: finalMaxTokens,
        lexml_data: lexmlReferences,
        user_id: session.user.id,
        template: template,
      })
    } catch (cacheError) {
      console.warn("Erro ao salvar no cache:", cacheError)
    }

    // Salvar contrato gerado
    try {
      await supabase.from("contracts").insert({
        user_id: session.user.id,
        nome: title || `Contrato ${contractType} - ${new Date().toLocaleDateString("pt-BR")}`,
        descricao: prompt.substring(0, 500),
        tipo: contractType,
        conteudo: finalContent,
        openai_model: model,
        temperature: finalTemperature,
        max_tokens: finalMaxTokens,
        lexml_data: lexmlReferences,
        template: template,
      })
    } catch (contractError) {
      console.warn("Erro ao salvar contrato:", contractError)
    }

    // Decrementar cr√©ditos se necess√°rio
    if (subscription) {
      try {
        const creditField = contractType === "simple" ? "creditos_simples" : "creditos_avancados"
        await supabase
          .from("subscriptions")
          .update({
            [creditField]: Math.max(0, subscription[creditField] - 1),
          })
          .eq("user_id", session.user.id)
      } catch (creditError) {
        console.warn("Erro ao decrementar cr√©ditos:", creditError)
      }
    }

    // Retornar resposta com campo 'content' que o frontend espera
    return NextResponse.json({
      content: finalContent, // Campo principal que o frontend espera
      html: finalContent, // Compatibilidade
      model,
      tokens_used: finalMaxTokens,
      cached: false,
      using_simulation: false,
      lexml_references: lexmlReferences.references,
      lexml_total: lexmlReferences.total,
      template: template,
    })
  } catch (error) {
    console.error("generate-contract:", error)

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: "Dados de entrada inv√°lidos",
          details: error.errors.map((e) => `${e.path.join(".")}: ${e.message}`).join(", "),
        },
        { status: 400 },
      )
    }

    return NextResponse.json(
      {
        error: "Erro interno do servidor",
        details: error instanceof Error ? error.message : "Erro desconhecido",
      },
      { status: 500 },
    )
  }
}
